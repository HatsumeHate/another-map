---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MSI.
--- DateTime: 02.09.2021 17:40
---
do


    local Click_Ability = 0
    local Click_Condition = 0
    MARK_TYPE_QUESTION = 1
    MARK_TYPE_EXCLAMATION = 2

    MARK_COMMON = 1
    MARK_SPECIAL = 2
    MARK_DAILY = 3
    MARK_EMERGENCY = 4
    MARK_LOW_COMMON = 5
    MARK_LOW_DAILY = 6
    MARK_UNAVAILABLE = 7
    MARK_TEAMCOLOR = 8
    MARK_ATTENTION = 9

    local MarkList = 0




    function ClickCondition()
        return GetOrderTargetItem() == nil and GetUnitAbilityLevel(GetOrderTargetUnit(), Click_Ability) > 0 and GetIssuedOrderId() == order_smart and IsUnitInRange(GetOrderTargetUnit(), GetTriggerUnit(), 200.)
    end

    ---@param unit unit
    ---@param trig trigger
    function ClickFunctionsRemove(unit, trig)
        UnitRemoveAbility(unit, Click_Ability)
        if trig then DestroyTrigger(trig) end
    end

    function ClickFunctionsAdd(unit)
        UnitAddAbility(unit, Click_Ability)
    end

    ---@param npc unit
    ---@param actions function
    function RegisterClickFeedbackOnNPC(npc, actions)
        local ClickTrig = CreateTrigger()

            TriggerRegisterAnyUnitEventBJ(ClickTrig, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
            TriggerAddCondition(ClickTrig, Click_Condition)
            TriggerAddAction(ClickTrig, function()
                if GetOrderTargetUnit() == npc then
                    actions()
                end
            end)


        return ClickTrig
    end


    ---@param count integer
    ---@param item integer
    ---@param where table
    ---@param max_per_spawn integer
    function CreateQuestItems(count, item, where, max_per_spawn)

        while(count > 0) do
            local currentspawn = GetRandomInt(1, max_per_spawn or 1)
            local rect = where[GetRandomInt(1, #where)]

            if count - currentspawn < 0 then currentspawn = currentspawn - count end
            count = count - currentspawn

            for i = 1, currentspawn do CreateItem(item, GetRandomRectX(rect), GetRandomRectY(rect)) end
        end

        where = nil
    end


    ---@param myfunction function
    function PickUpItemReaction(item_id, myfunction)
        local trg = CreateTrigger()
        TriggerRegisterAnyUnitEventBJ(trg, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        TriggerAddAction(trg, function()
            if GetItemTypeId(GetManipulatedItem()) == item_id then
                myfunction()
            end
        end)
    end


    ---@param myfunction function
    function PickUpAnyItemReaction(myfunction)
        local trg = CreateTrigger()
        TriggerRegisterAnyUnitEventBJ(trg, EVENT_PLAYER_UNIT_PICKUP_ITEM)
        TriggerAddAction(trg, myfunction)
    end

    ---@param unit unit
    ---@param leash_range real
    function CreateLeashForUnit(unit, leash_range)
        local x = GetUnitX(unit); local y = GetUnitY(unit)
        local returning = false

            local timer = CreateTimer()
            TimerStart(timer, 3.25, true, function()
                local state = GetUnitState(unit, UNIT_STATE_LIFE) > 0.045

                    if state and not returning and not IsUnitInRangeXY(unit, x, y, leash_range) then
                        UnitAddAbility(unit, FourCC("AAIM"))
                        UnitAddAbility(unit, FourCC("Avul"))
                        UnitAddAbility(unit, FourCC("Abun"))
                        returning = true
                        IssueImmediateOrderById(unit, order_stop)
                        DelayAction(0., function() IssuePointOrderById(unit, order_move, x, y) end)
                    elseif IsUnitInRangeXY(unit, x, y, 35.) and state and returning then
                        SetUnitState(unit, UNIT_STATE_LIFE, GetUnitState(unit, UNIT_STATE_MAX_LIFE))
                        UnitRemoveAbility(unit, FourCC("AAIM"))
                        UnitRemoveAbility(unit, FourCC("Avul"))
                        UnitRemoveAbility(unit, FourCC("Abun"))
                        IssueImmediateOrderById(unit, order_stop)
                        returning = false
                    elseif not state then
                        DestroyTimer(GetExpiredTimer())
                    elseif returning then
                        IssuePointOrderById(unit, order_move, x, y)
                    end

                if not IsAnyHeroInRange(x, y, leash_range) and state then
                    SetUnitState(unit, UNIT_STATE_LIFE, GetUnitState(unit, UNIT_STATE_MAX_LIFE))
                end

            end)

    end


    ---@param id integer
    ---@param position rect
    ---@param facing real
    function CreateNPC(id, position, facing, name)
        local npc = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), FourCC(id), GetRectCenterX(position), GetRectCenterY(position), facing)
        BlzSetUnitName(npc, name)
        return npc
    end


    ---@param unit unit
    ---@param mark_type number
    ---@param mark_var number
    function AddQuestMark(unit, mark_type, mark_var)
        return AddSpecialEffectTarget(MarkList[mark_type or 1][mark_var or 1], unit, "overhead")
    end


    function InitQuestUtils()
        Click_Ability = FourCC("A01W")
        Click_Condition = Condition(ClickCondition)

        MarkList = {
            [MARK_TYPE_QUESTION] = {
                [MARK_COMMON] = "Quest\\Completed_Quest.mdx",
                [MARK_SPECIAL] = "Quest\\Completed_Quest_Special.mdx",
                [MARK_DAILY] = "Quest\\Completed_Quest_Daily.mdx",
                [MARK_EMERGENCY] = "Quest\\Completed_Quest_Emergency.mdx",
                [MARK_LOW_COMMON] = "Quest\\Completed_Quest_Low.mdx",
                [MARK_LOW_DAILY] = "Quest\\Completed_Quest_Low_Daily.mdx",
                [MARK_UNAVAILABLE] = "Quest\\Completed_Quest_NOT.mdx",
                [MARK_TEAMCOLOR] = "Quest\\Completed_Quest_TEAMCOLOR.mdx"
            },
            [MARK_TYPE_EXCLAMATION] = {
                [MARK_COMMON] = "Quest\\ExcMark_Gold_NonrepeatableQuest.mdx",
                [MARK_SPECIAL] = "Quest\\ExcMark_Orange_ClassQuest.mdx",
                [MARK_DAILY] = "Quest\\ExcMark_Blue_RepetableQuest.mdx",
                [MARK_EMERGENCY] = "Quest\\ExcMark_Red_Emergency.mdx",
                [MARK_LOW_COMMON] = "Quest\\ExcMark_Gold_LowNonrepeatableQuest.mdx",
                [MARK_LOW_DAILY] = "Quest\\ExcMark_Blue_LowRepeatableQuest.mdx",
                [MARK_UNAVAILABLE] = "Quest\\ExcMark_Grey_UnavailableQuest.mdx",
                [MARK_TEAMCOLOR] = "Quest\\ExcMark_TeamColor.mdx",
                [MARK_ATTENTION] = "Quest\\ExcMark_Green_FlightPath.mdx",
            }
        }

        InitQuestsData()
        InitOutskirtsQuestsData()

    end

end