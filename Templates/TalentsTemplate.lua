---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MSI.
--- DateTime: 19.09.2021 4:55
---
do

    local TalentsData
    ClassTalents = nil


    ---@param unit unit
    ---@param talent_id string
    function AddUnitTalentLevel(unit, talent_id)
        local unit_data = GetUnitData(unit)

        if not unit_data.talents then
            unit_data.talents = {}
            unit_data.talent_list = {}
        end

        if unit_data.talents[talent_id] then
            unit_data.talents[talent_id].level = unit_data.talents[talent_id].level + 1
            return unit_data.talents[talent_id].level
        else
            unit_data.talents[talent_id] = {}
            unit_data.talents[talent_id].level = 1
            unit_data.talent_list[#unit_data.talent_list + 1] = talent_id
            return 1
        end

        return 0
    end


    ---@param unit unit
    ---@param talent_id string
    function SetUnitTalentLevel(unit, talent_id, level)
        local unit_data = GetUnitData(unit)

        if not unit_data.talents then
            unit_data.talents = {}
            unit_data.talent_list = {}
        end

        if unit_data.talents[talent_id] then
            unit_data.talents[talent_id].level = level
            return unit_data.talents[talent_id].level
        else
            unit_data.talents[talent_id] = {}
            unit_data.talents[talent_id].level = level
            unit_data.talent_list[#unit_data.talent_list + 1] = talent_id
            return 1
        end

        return 0
    end


    ---@param unit unit
    ---@param talent_id string
    function GetUnitTalentLevel(unit, talent_id)
        local unit_data = GetUnitData(unit)

            if unit_data.talents then
                if unit_data.talents[talent_id] then
                    return unit_data.talents[talent_id].level
                else
                    return 0
                end
            else
                return 0
            end

        return 0
    end


    ---@param talent_id string
    function GetTalentData(talent_id)
        return TalentsData[talent_id]
    end


    ---@param talent_id string
    ---@param talent_data table
    function NewTalentTemplate(talent_id, talent_data)
        talent_data.talent_id = talent_id
        talent_data.points_required = talent_data.points_required or 0
        TalentsData[talent_id] = talent_data
        return TalentsData[talent_id]
    end


    function DefineTalentsData()
        TalentsData = {}

        -- tier 1
        NewTalentTemplate("talent_ignite", {
            icon = "Talents\\BTNFireSpell6.blp",
            max_level = 3,
        })

        NewTalentTemplate("talent_inner_warmth", {
            icon = "Talents\\BTNFireSpell2.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, FIRE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ICE_RESIST, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, FIRE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ICE_RESIST, 5, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, FIRE_BONUS, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, FIRE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ICE_RESIST, 5, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_thaw", {
            icon = "Talents\\BTNFireSpell9.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, MP_REGEN, 1.03, MULTIPLY_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, MP_REGEN, 1.06, MULTIPLY_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, MP_REGEN, 1.09, MULTIPLY_BONUS, flag)
                end,
                cancel_last_level = true,
            },
            max_level = 3,
        })
        -- tier 2
        NewTalentTemplate("talent_burnout", {
            icon = "Talents\\BTNFireSpell12.blp",
            max_level = 2,
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, MAGICAL_ATTACK, 1.05, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, HP_VALUE, 0.95, MULTIPLY_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, MAGICAL_ATTACK, 1.1, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, HP_VALUE, 0.9, MULTIPLY_BONUS, flag)
                end,
                cancel_last_level = true,
            },
            points_required = 2,
            requires = { "talent_ignite", "talent_inner_warmth" }
        })

        NewTalentTemplate("talent_overflow", {
            icon = "Talents\\BTNFireSpell8.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        if GetUnitState(unit, UNIT_STATE_MANA) / BlzGetUnitMaxMana(unit) >= 0.6 then
                            AddStatusBarState("talent_overflow", "Talents\\BTNFireSpell8.blp", POSITIVE_BUFF, GetPlayerId(GetOwningPlayer(unit))+1)
                            SetStatusBarHeaderName("talent_overflow", LOCALE_LIST[my_locale].TALENTS["talent_overflow"].name, GetPlayerId(GetOwningPlayer(unit))+1)
                        end
                    else
                        local unit_data = GetUnitData(unit)
                        unit_data.boost_overflow = nil
                        RemoveStatusBarState("talent_overflow", GetPlayerId(GetOwningPlayer(unit))+1)
                    end
                end
            },
            max_level = 2,
            points_required = 2,
            requires = { "talent_ignite", "talent_inner_warmth", "talent_thaw" }
        })

        NewTalentTemplate("talent_heating_up", {
            icon = "Talents\\BTNFireSpell1.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.heating_up_boost = nil
                        DestroyEffect(unit_data.heating_up_effect)
                        RemoveStatusBarState("talent_heating_up", GetPlayerId(GetOwningPlayer(unit))+1)
                    end
                end
            },
            max_level = 2,
            points_required = 2,
            requires = { "talent_thaw", "talent_inner_warmth" }
        })

        -- tier 3
        NewTalentTemplate("talent_heat", {
            icon = "Talents\\BTNFireSpell18.blp",
            max_level = 3,
            points_required = 4,
            requires = { "talent_burnout", "talent_overflow" }
        })

        NewTalentTemplate("talent_incinerate", {
            icon = "Talents\\BTNFireSpell3.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then
                        RemoveBuff(unit, "ATIN")
                    end
                end
            },
            max_level = 3,
            points_required = 4,
            requires = { "talent_burnout", "talent_overflow", "talent_heating_up" }
        })

        NewTalentTemplate("talent_napalm", {
            icon = "Talents\\BTNFireSpell10.blp",
            max_level = 3,
            points_required = 4,
            requires = { "talent_overflow", "talent_heating_up" }
        })

        -- tier 4
        NewTalentTemplate("talent_hell_flames", {
            icon = "Talents\\BTNFireSpell5.blp",
            max_level = 1,
            points_required = 6,
            requires = { "talent_heat", "talent_incinerate" }
        })


        -- tier 4
        NewTalentTemplate("talent_apocalypse", {
            icon = "Talents\\BTNFireSpell14.blp",
            max_level = 5,
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, FIRE_BONUS, 7, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, BURNING_DAMAGE_BOOST, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, FIRE_BONUS, 14, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, BURNING_DAMAGE_BOOST, 10, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, FIRE_BONUS, 21, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, BURNING_DAMAGE_BOOST, 15, STRAIGHT_BONUS, flag)
                end,
                [4] = function(unit, flag)
                    ModifyStat(unit, FIRE_BONUS, 28, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, BURNING_DAMAGE_BOOST, 20, STRAIGHT_BONUS, flag)
                end,
                [5] = function(unit, flag)
                    ModifyStat(unit, FIRE_BONUS, 35, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, BURNING_DAMAGE_BOOST, 25, STRAIGHT_BONUS, flag)
                end,
                cancel_last_level = true,
            },
            points_required = 6,
            requires = { "talent_incinerate", "talent_napalm" }
        })

        -- tier 1
        NewTalentTemplate("talent_flash", {
            icon = "Talents\\BTNLightningSpell10.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, MOVING_SPEED, 10, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, MOVING_SPEED, 10, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, MOVING_SPEED, 10, STRAIGHT_BONUS, flag)
                end
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_negative_charge", {
            icon = "Talents\\BTNLightningSpell3.blp",
            max_level = 4,
        })

        NewTalentTemplate("talent_positive_charge", {
            icon = "Talents\\BTNLightningSpell15.blp",
            max_level = 3,
        })

        -- tier 2
        NewTalentTemplate("talent_lightning_rod", {
            icon = "Talents\\BTNLightningSpell13.blp",
            max_level = 2,
            points_required = 2,
            requires = { "talent_flash", "talent_negative_charge" }
        })
        NewTalentTemplate("talent_voltage", {
            icon = "Talents\\BTNLightningSpell7.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then
                        RemoveBuff(unit, "ATAD")
                    end
                end
            },
            max_level = 2,
            points_required = 2,
            requires = { "talent_flash", "talent_negative_charge", "talent_positive_charge" }
        })
        NewTalentTemplate("talent_arc_discharge", {
            icon = "Talents\\BTNLightningSpell14.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        ArcDischargeTalentEffect(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        unit_data.arc_discharge_boost = 0
                        DestroyEffect(unit_data.arc_discharge_boost_effect)
                        DestroyTimer(unit_data.arc_discharge_boost_timer)
                        RemoveStatusBarState("talent_arc_discharge", GetPlayerId(GetOwningPlayer(unit))+1)
                    end
                end,
                [2] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.arc_discharge_boost_time = 1.5
                    end
                end,
                [3] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.arc_discharge_boost_time = 1.5
                    end
                end
            },
            points_required = 2,
            max_level = 3,
            requires = { "talent_negative_charge", "talent_positive_charge" }
        })

        -- tier 3
        NewTalentTemplate("talent_feedback", {
            icon = "Talents\\BTNLightningSpell4.blp",
            max_level = 2,
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, CRIT_MULTIPLIER, 0.2, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, MAGICAL_ATTACK, 0.93, MULTIPLY_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, CRIT_MULTIPLIER, 0.4, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, MAGICAL_ATTACK, 0.75, MULTIPLY_BONUS, flag)
                end,
                cancel_last_level = true,
            },
            points_required = 4,
            requires = { "talent_lightning_rod", "talent_voltage" }
        })
        NewTalentTemplate("talent_induction", {
            icon = "Talents\\BTNLightningSpell17.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then
                        RemoveBuff(unit, "ATID")
                    end
                end
            },
            max_level = 3,
            points_required = 4,
            requires = { "talent_lightning_rod", "talent_voltage", "talent_arc_discharge" }
        })
        NewTalentTemplate("talent_extra_charge", {
            icon = "Talents\\BTNLightningSpell1.blp",
            max_level = 3,
            points_required = 4,
            requires = { "talent_arc_discharge", "talent_voltage" }
        })

        -- tier 4
        NewTalentTemplate("talent_shock", {
            icon = "Talents\\BTNLightningSpell12.blp",
            max_level = 1,
            points_required = 6,
            requires = { "talent_induction", "talent_feedback" }
        })
        NewTalentTemplate("talent_disintegration", {
            icon = "Talents\\BTNLightningSpell2.blp",
            max_level = 1,
            points_required = 6,
            requires = { "talent_induction", "talent_extra_charge" }
        })

        -- tier 5
        NewTalentTemplate("talent_convulsions", {
            icon = "Talents\\BTNFocusLightning.blp",
            max_level = 3,
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, DAMAGE_TO_CC_ENEMIES, 7, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, DAMAGE_TO_CC_ENEMIES, 7, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, DAMAGE_TO_CC_ENEMIES, 7, STRAIGHT_BONUS, flag)
                end,
            },
            points_required = 8,
            requires = { "talent_shock", "talent_disintegration" }
        })


        -- tier 1
        NewTalentTemplate("talent_remorseless", {
            icon = "Talents\\BTNFrostDeath.blp",
            max_level = 3,
        })

        NewTalentTemplate("talent_crystallization", {
            icon = "Talents\\BTNIceShatter.blp",
            max_level = 3,
        })

        NewTalentTemplate("talent_ice_crust", {
            icon = "Talents\\BTNIceType1.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, MELEE_DAMAGE_REDUCTION, 2, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, MELEE_DAMAGE_REDUCTION, 2, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, MELEE_DAMAGE_REDUCTION, 2, STRAIGHT_BONUS, flag)
                end,
                [4] = function(unit, flag)
                    ModifyStat(unit, MELEE_DAMAGE_REDUCTION, 2, STRAIGHT_BONUS, flag)
                end,
                [5] = function(unit, flag)
                    ModifyStat(unit, MELEE_DAMAGE_REDUCTION, 2, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 5,
        })

        -- tier 2
        NewTalentTemplate("talent_glaciation", {
            icon = "Talents\\BTNFrozenShield.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        GlaciationTalentEffect(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        unit_data.glaciation_charge = 0
                        DestroyTimer(unit_data.glaciation_charge_timer)
                        RemoveBuff(unit, "ATGL")
                    end
                end,
                [2] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        ResumeTimer(unit_data.glaciation_charge_timer)
                    end
                end,
                [3] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        ResumeTimer(unit_data.glaciation_charge_timer)
                    end
                end
            },
            points_required = 2,
            requires = { "talent_remorseless", "talent_crystallization" },
            max_level = 3,
        })

        NewTalentTemplate("talent_breath_of_frost", {
            icon = "Talents\\BTNchrm.blp",
            points_required = 2,
            requires = { "talent_remorseless", "talent_crystallization", "talent_ice_crust" },
            max_level = 2,
        })

        NewTalentTemplate("talent_icy_veins", {
            icon = "Talents\\BTNHeartFreezer.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, HP_REGEN, 0.95, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, ICE_BONUS, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, HP_REGEN, 0.9, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, ICE_BONUS, 10, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, HP_REGEN, 0.85, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, ICE_BONUS, 15, STRAIGHT_BONUS, flag)
                end,
                cancel_last_level = true,
            },
            points_required = 2,
            requires = { "talent_ice_crust", "talent_crystallization" },
            max_level = 3,
        })

        -- tier 3
        NewTalentTemplate("talent_deep_freeze", {
            icon = "Talents\\BTNFrozenShackles.blp",
            requires = { "talent_glaciation", "talent_breath_of_frost" },
            points_required = 4,
            max_level = 2,
        })

        NewTalentTemplate("talent_heat_transfer", {
            icon = "Talents\\BTN_CR_BloodTapRED.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATHE") end
                end
            },
            requires = { "talent_glaciation", "talent_breath_of_frost", "talent_icy_veins" },
            points_required = 4,
            max_level = 3,
        })

        NewTalentTemplate("talent_fragility", {
            icon = "Talents\\BTNSkullTreasure.blp",
            requires = { "talent_breath_of_frost", "talent_icy_veins" },
            points_required = 4,
            max_level = 3,
        })

        -- tier 4
        NewTalentTemplate("talent_ice_enduring", {
            icon = "Talents\\BTNIce.BLP",
            points_required = 6,
            requires = { "talent_deep_freeze", "talent_heat_transfer", "talent_fragility" },
            max_level = 1,
        })



        -- BARBARIAN
        -- tier 1
        NewTalentTemplate("talent_blade_dance", {
            icon = "Talents\\BTN_cr_VeeR6.blp",
            instant_effects = {
              [1] = function(unit, flag)
                  BladeDanceTalentEffect(unit)
              end,
              [2] = function(unit, flag)
                  BladeDanceTalentEffect(unit)
              end,
              [3] = function(unit, flag)
                  BladeDanceTalentEffect(unit)
              end,
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_strong_will", {
            icon = "Talents\\BTN_CR_Supreme_Magic.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, MAGICAL_SUPPRESSION, 16, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, MAGICAL_SUPPRESSION, 24, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, MAGICAL_SUPPRESSION, 32, STRAIGHT_BONUS, flag)
                end,
                cancel_last_level = true
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_sweeping_strikes", {
            icon = "Talents\\BTN_cr_VeeR4.blp",
            max_level = 3,
        })

        -- tier 2
        NewTalentTemplate("talent_rage", {
            icon = "Talents\\BTNEssenceOfCelerity.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATRG") end
                end
            },
            requires = { "talent_blade_dance", "talent_strong_will" },
            points_required = 2,
            max_level = 3,
        })

        NewTalentTemplate("talent_strong_body", {
            icon = "Talents\\BTNEnhanceBody.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 1.07, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, MP_VALUE, 0.9, MULTIPLY_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 1.14, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, MP_VALUE, 0.83, MULTIPLY_BONUS, flag)
                end,
                cancel_last_level = true
            },
            requires = { "talent_blade_dance", "talent_strong_will", "talent_sweeping_strikes" },
            points_required = 2,
            max_level = 2,
        })

        NewTalentTemplate("talent_reflexes", {
            icon = "Talents\\BTNCatsEye.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, CRIT_CHANCE, 4, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, CRIT_CHANCE, 4, STRAIGHT_BONUS, flag)
                end,
            },
            requires = { "talent_sweeping_strikes", "talent_strong_will" },
            points_required = 2,
            max_level = 2,
        })

        -- tier 3
        NewTalentTemplate("talent_breaking_defence", {
            icon = "Talents\\BTNBreakingArmor.BLP",
            requires = { "talent_rage", "talent_strong_body" },
            points_required = 4,
            max_level = 3,
        })

        NewTalentTemplate("talent_pain_killer", {
            icon = "Talents\\BTN_cr_VeeR8.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATPK") end
                end
            },
            requires = { "talent_rage", "talent_strong_body", "talent_reflexes" },
            points_required = 4,
            max_level = 3,
        })

        NewTalentTemplate("talent_momentum", {
            icon = "Talents\\BTN_cr_RandomNiftyIcon.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    MomentumTalentEffect(unit)
                end,
                [2] = function(unit, flag)
                    MomentumTalentEffect(unit)
                end,
                [3] = function(unit, flag)
                    MomentumTalentEffect(unit)
                end,
            },
            requires = { "talent_strong_body", "talent_reflexes" },
            points_required = 4,
            max_level = 3,
        })

        -- tier 4
        NewTalentTemplate("talent_carnage", {
            icon = "Talents\\BTN_cr_CarA1.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATCR") end
                end
            },
            requires = { "talent_breaking_defence", "talent_pain_killer", "talent_momentum" },
            points_required = 6,
            max_level = 1,
        })


        -- tier 1
        NewTalentTemplate("talent_sharpened_blade", {
            icon = "Talents\\BTNDER_Weapon_Forge.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        SharpenedBladeTalentEffect(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        unit_data.sharpened_blade_counter = 0
                        DestroyTimer(unit_data.sharpened_blade_charge_timer)
                    end
                end,
                [2] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.sharpened_blade_charge_time = 15.
                        ResumeTimer(unit_data.sharpened_blade_charge_timer)
                    end
                end,
                [3] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.sharpened_blade_charge_time = 15.
                        ResumeTimer(unit_data.sharpened_blade_charge_timer)
                    end
                end
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_herbs", {
            icon = "Talents\\BTNTear of the Forest.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        HerbsTalentEffect(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        DestroyTimer(unit_data.herbs_charge_timer)
                    end
                end,
                [2] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        --unit_data.herbs_charge_time = 7.
                        ResumeTimer(unit_data.herbs_charge_timer)
                    end
                end,
                [3] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        --unit_data.herbs_charge_time = 7.
                        ResumeTimer(unit_data.herbs_charge_timer)
                    end
                end
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_hard_training", {
            icon = "Talents\\BTNHourglass.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, STR_STAT, 3, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, AGI_STAT, 3, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, STR_STAT, 3, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, AGI_STAT, 3, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, STR_STAT, 3, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, AGI_STAT, 3, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 3,
        })

        -- tier 2
        NewTalentTemplate("talent_elbow_strike", {
            icon = "Talents\\BTN_CR_Mojo.blp",
            requires = { "talent_sharpened_blade", "talent_herbs" },
            points_required = 2,
            max_level = 2,
        })

        NewTalentTemplate("talent_disadvantage", {
            icon = "Talents\\BTN_cr_CarA3.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        DisadvantageTalentEffect(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        DestroyTimer(unit_data.disadvantage_timer)
                    end
                end,
                [2] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        ResumeTimer(unit_data.disadvantage_timer)
                    end
                end,
                [3] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        ResumeTimer(unit_data.disadvantage_timer)
                    end
                end
            },
            requires = { "talent_sharpened_blade", "talent_herbs", "talent_hard_training" },
            points_required = 2,
            max_level = 3,
        })

        NewTalentTemplate("talent_bigger_they_are", {
            icon = "Talents\\BTN_CR_MolotAim.blp",
            requires = { "talent_hard_training", "talent_herbs" },
            points_required = 2,
            max_level = 2,
        })

        -- tier 3
        NewTalentTemplate("talent_disorientation", {
            icon = "Talents\\BTNRedDemon.blp",
            requires = { "talent_elbow_strike", "talent_disadvantage" },
            points_required = 4,
            max_level = 3,
        })

        NewTalentTemplate("talent_opportunity", {
            icon = "Talents\\BTNRevage.blp",
            requires = { "talent_elbow_strike", "talent_disadvantage", "talent_bigger_they_are" },
            points_required = 4,
            max_level = 3,
        })

        NewTalentTemplate("talent_lining_armor", {
            icon = "Talents\\BTN_cr_HOLYlllarmorr.blp",
            requires = { "talent_disadvantage", "talent_bigger_they_are" },
            points_required = 4,
            max_level = 2,
        })

        -- tier 4
        NewTalentTemplate("talent_penetration", {
            icon = "Talents\\BTNicons_112062_btn.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, COOLDOWN_REDUCTION, 25, STRAIGHT_BONUS, flag)
                end
            },
            requires = { "talent_opportunity", "talent_lining_armor", "talent_disorientation" },
            points_required = 6,
            max_level = 1,
        })

        -- tier 1
        NewTalentTemplate("talent_hardening", {
            icon = "Talents\\BTNpetry.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 1.05, MULTIPLY_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 1.07, MULTIPLY_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 1.1, MULTIPLY_BONUS, flag)
                end,
                cancel_last_level = true,
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_well_being", {
            icon = "Talents\\BTNBless.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, HEALING_BONUS, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, HP_REGEN, 1.03, MULTIPLY_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, HEALING_BONUS, 10, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, HP_REGEN, 1.06, MULTIPLY_BONUS, flag)
                end,
                cancel_last_level = true,
            },
            max_level = 2
        })

        NewTalentTemplate("talent_fracture", {
            icon = "Talents\\BTNMaceStrike.blp",
            max_level = 2,
        })

        -- tier 2
        NewTalentTemplate("talent_anger_impulse", {
            icon = "Talents\\BTNCR_Human_Bloodlust.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATRI") end
                end
            },
            requires = { "talent_well_being", "talent_fracture" },
            points_required = 2,
            max_level = 3,
        })

        NewTalentTemplate("talent_adrenaline", {
            icon = "Talents\\BTNAdrenalin.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATAR") end
                end
            },
            requires = { "talent_hardening", "talent_fracture" },
            points_required = 2,
            max_level = 2,
        })

        NewTalentTemplate("talent_inevitability", {
            icon = "Talents\\BTN_cr_Warp8.blp",
            requires = { "talent_well_being" },
            points_required = 2,
            max_level = 2,
        })

        NewTalentTemplate("talent_reinforce", {
            icon = "Talents\\BTNability_warrior_unrelentingassault.blp",
            requires = { "talent_hardening" },
            points_required = 2,
            max_level = 2,
        })

        -- tier 3
        NewTalentTemplate("talent_vulnerability", {
            icon = "Talents\\BTNredskull.blp",
            requires = { "talent_adrenaline", "talent_reinforce" },
            points_required = 4,
            max_level = 2,
        })

        NewTalentTemplate("talent_pressure_point", {
            icon = "Talents\\BTN_cr_CarA8.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATPP") end
                end
            },
            requires = { "talent_anger_impulse", "talent_adrenaline" },
            points_required = 4,
            max_level = 3,
        })

        NewTalentTemplate("talent_intimidation", {
            icon = "Talents\\BTNCRWarcry.blp",
            requires = { "talent_anger_impulse", "talent_inevitability" },
            points_required = 4,
            max_level = 2,
        })

        -- tier 4
        NewTalentTemplate("talent_second_wind", {
            icon = "Talents\\BTN_cr_Warp6.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then RemoveBuff(unit, "ATSW") end
                end
            },
            requires = { "talent_vulnerability", "talent_pressure_point", "talent_intimidation" },
            points_required = 6,
            max_level = 1,
        })




        -- NECROMANCER
         -- tier 1
        NewTalentTemplate("talent_durable_bones", {
            icon = "Talents\\BTNBones.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, PHYSICAL_DEFENCE, 25, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, PHYSICAL_BONUS, 2, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, PHYSICAL_DEFENCE, 25, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, PHYSICAL_BONUS, 2, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, PHYSICAL_DEFENCE, 25, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, PHYSICAL_BONUS, 2, STRAIGHT_BONUS, flag)
                end,
                [4] = function(unit, flag)
                    ModifyStat(unit, PHYSICAL_DEFENCE, 25, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, PHYSICAL_BONUS, 2, STRAIGHT_BONUS, flag)
                end,
                [5] = function(unit, flag)
                    ModifyStat(unit, PHYSICAL_DEFENCE, 25, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, PHYSICAL_BONUS, 2, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 5,
        })

        NewTalentTemplate("talent_forbidden_knowledge", {
            icon = "Talents\\BTNWeaver 03.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, INT_STAT, 2, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, INT_STAT, 1, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, INT_STAT, 1, STRAIGHT_BONUS, flag)
                end,
                [4] = function(unit, flag)
                    ModifyStat(unit, INT_STAT, 1, STRAIGHT_BONUS, flag)
                end,
                [5] = function(unit, flag)
                    ModifyStat(unit, INT_STAT, 1, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 5,
        })

        NewTalentTemplate("talent_toxicity", {
            icon = "Talents\\BTNCharmBuff.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, POISON_BONUS, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, POISON_BONUS, 5, STRAIGHT_BONUS, flag)
                end
            },
            max_level = 2,
        })

        --tier 2
        NewTalentTemplate("talent_life_steal", {
            icon = "Talents\\BTNLifeSteal.blp",
            points_required = 2,
            requires = { "talent_durable_bones", "talent_forbidden_knowledge" },
            max_level = 3,
        })

        NewTalentTemplate("talent_death_embrace", {
            icon = "Talents\\BTNTrueDamageNew.blp",
            points_required = 2,
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        DeathEmbraceTalent(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        DestroyTimer(unit_data.death_embrace_timer)
                        if unit_data.death_embrace_current_bonus > 0 then ModifyStat(unit, MAGICAL_ATTACK, 1. + (unit_data.death_embrace_current_bonus * 0.01), MULTIPLY_BONUS, false) end
                    end
                end,
                [2] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.death_embrace_bonus = 10
                    end
                end,
                [3] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.death_embrace_bonus = 15
                    end
                end
            },
            requires = { "talent_durable_bones", "talent_forbidden_knowledge", "talent_toxicity" },
            max_level = 3,
        })

        NewTalentTemplate("talent_lesion", {
            icon = "Talents\\BTNTurnUndead.blp",
            points_required = 2,
            requires = { "talent_forbidden_knowledge", "talent_toxicity" },
            max_level = 3,
        })

        --tier 3
        NewTalentTemplate("talent_ritual", {
            icon = "Talents\\BTNNecromancy1.blp",
            points_required = 4,
            requires = { "talent_life_steal", "talent_death_embrace" },
            max_level = 3,
        })

        NewTalentTemplate("talent_blood_pact", {
            icon = "Talents\\BTN_cr_CarA7.blp",
            points_required = 4,
            requires = { "talent_life_steal", "talent_death_embrace", "talent_lesion" },
            max_level = 3,
        })

        NewTalentTemplate("talent_abyss_awakens", {
            icon = "Talents\\BTN_EyeOfShadows.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then
                        RemoveBuff(unit, "AABS")
                    end
                end,
                [2] = function(unit, flag)
                    if not flag then
                        RemoveBuff(unit, "AABS")
                    end
                end,
                [3] = function(unit, flag)
                    if not flag then
                        RemoveBuff(unit, "AABS")
                    end
                end,
                cancel_last_level = true
            },
            points_required = 4,
            requires = { "talent_death_embrace", "talent_lesion" },
            max_level = 3,
        })

        --tier 4
        NewTalentTemplate("talent_cheat_death", {
            icon = "Talents\\BTNTaint.blp",
            points_required = 6,
            requires = { "talent_ritual", "talent_blood_pact" },
            max_level = 1,
        })

        NewTalentTemplate("talent_grave_cold", {
            icon = "Talents\\BTNBlackWinter.blp",
            points_required = 6,
            requires = { "talent_blood_pact", "talent_abyss_awakens" },
            max_level = 1,
        })


        -- tier 1
        NewTalentTemplate("talent_frailty", {
            icon = "Talents\\BTNBlackMass.blp",
            max_level = 2,
        })

        NewTalentTemplate("talent_spiritual_vessel", {
            icon = "Talents\\BTNImmOff.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, MP_VALUE, 20, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, MP_VALUE, 40, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, MP_VALUE, 60, STRAIGHT_BONUS, flag)
                end,
                cancel_last_level = true
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_death_march", {
            icon = "Talents\\BTNAgi.blp",
            max_level = 3,
        })

        --tier 2
        NewTalentTemplate("talent_amplify_damage", {
            icon = "Talents\\BTNDarkhand.blp",
            points_required = 2,
            requires = { "talent_frailty", "talent_spiritual_vessel" },
            max_level = 3,
        })

        NewTalentTemplate("talent_face_of_death", {
            icon = "Talents\\BTNVoidwalker.blp",
            points_required = 2,
            requires = { "talent_frailty", "talent_spiritual_vessel", "talent_death_march" },
            max_level = 2,
        })

        NewTalentTemplate("talent_bargain", {
            icon = "Talents\\BTNPP_Heart_Steal.blp",
            points_required = 2,
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, CRIT_CHANCE, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, VULNERABILITY, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, CRIT_CHANCE, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, VULNERABILITY, 5, STRAIGHT_BONUS, flag)
                end,
            },
            requires = { "talent_spiritual_vessel", "talent_death_march" },
            max_level = 2,
        })

        --tier 3
        NewTalentTemplate("talent_insanity", {
            icon = "Talents\\BTNHorrorSoul.blp",
            points_required = 4,
            requires = { "talent_amplify_damage", "talent_face_of_death" },
            max_level = 3,
        })

        NewTalentTemplate("talent_persistent_curse", {
            icon = "Talents\\BTNTimeEclipse3.blp",
            points_required = 4,
            requires = { "talent_amplify_damage", "talent_face_of_death", "talent_bargain" },
            max_level = 3,
        })

        NewTalentTemplate("talent_vile_malediction", {
            icon = "Talents\\BTNDarkHarvest.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    local unit_data = GetUnitData(unit)

                        if flag then unit_data.malediction_group = CreateGroup()
                        else
                            ModifyStat(unit, MAGICAL_ATTACK, unit_data.malediction_stacks, STRAIGHT_BONUS, false)
                            DestroyGroup(unit_data.malediction_group)
                        end

                end,
                [2] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        local bonus = 7
                        local max = 140

                        local result = BlzGroupGetSize(unit_data.malediction_group) * bonus
                        if result > max then result = max end

                        ModifyStat(unit, MAGICAL_ATTACK, unit_data.malediction_stacks, STRAIGHT_BONUS, false)
                        ModifyStat(unit, MAGICAL_ATTACK, result, STRAIGHT_BONUS, true)
                        unit_data.malediction_stacks = result
                    end
                end,
                [3] = function(unit, flag)
                    if flag then
                        local unit_data = GetUnitData(unit)
                        local bonus = 15
                        local max = 165

                        local result = BlzGroupGetSize(unit_data.malediction_group) * bonus
                        if result > max then result = max end

                        ModifyStat(unit, MAGICAL_ATTACK, unit_data.malediction_stacks, STRAIGHT_BONUS, false)
                        ModifyStat(unit, MAGICAL_ATTACK, result, STRAIGHT_BONUS, true)
                        unit_data.malediction_stacks = result
                    end
                end
            },
            points_required = 4,
            requires = { "talent_face_of_death", "talent_bargain" },
            max_level = 3,
        })

        --tier 4
        NewTalentTemplate("talent_sudden_death", {
            icon = "Talents\\BTN_CR_Summon.blp",
            points_required = 6,
            requires = { "talent_insanity", "talent_persistent_curse", "talent_vile_malediction" },
            max_level = 1,
        })

        -- tier 1
        NewTalentTemplate("talent_leeches", {
            icon = "Talents\\BTNDevourS.blp",
            max_level = 3,
        })

        NewTalentTemplate("talent_soul_remains", {
            icon = "Talents\\BTNSoulStrike.blp",
            max_level = 3,
        })

        NewTalentTemplate("talent_undead_expert", {
            icon = "Talents\\BTNUndeadExpert.blp",--"Talents\\BTNAdept 01.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, BONUS_UNDEAD_DAMAGE, 7, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, BONUS_UNDEAD_DAMAGE, 8, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 2,
        })

        --tier 2
        NewTalentTemplate("talent_pursuer", {
            icon = "Talents\\BTNCurseOfTheSkulls.blp",
            points_required = 2,
            requires = { "talent_leeches" },
            max_level = 3,
        })

        NewTalentTemplate("talent_experienced_summoner", {
            icon = "Talents\\BTNBloodBoundTome.blp",
            points_required = 2,
            instant_effects = {
                [1] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                    ForGroup(minions, function() ModifyStat(GetEnumUnit(), HP_VALUE, 1.1, MULTIPLY_BONUS, flag) end)
                    DestroyGroup(minions)
                end,
                [2] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                    ForGroup(minions, function() ModifyStat(GetEnumUnit(), HP_VALUE, 1.2, MULTIPLY_BONUS, flag) end)
                    DestroyGroup(minions)
                end,
                cancel_last_level = true
            },
            requires = { "talent_leeches", "talent_soul_remains" },
            max_level = 2,
        })

        NewTalentTemplate("talent_tenacity_of_undead", {
            icon = "Talents\\BTNStrikeoftheDank.blp",
            points_required = 2,
            instant_effects = {
                [1] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                        if flag then ForGroup(minions, function() SetUnitTalentLevel(GetEnumUnit(), "talent_tenacity_of_undead", 1) end)
                        else ForGroup(minions, function() SetUnitTalentLevel(GetEnumUnit(), "talent_tenacity_of_undead", 0) end) end
                    DestroyGroup(minions)
                end,
                [2] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                        if flag then ForGroup(minions, function() SetUnitTalentLevel(GetEnumUnit(), "talent_tenacity_of_undead", 2) end)
                        else ForGroup(minions, function() SetUnitTalentLevel(GetEnumUnit(), "talent_tenacity_of_undead", 0) end) end
                    DestroyGroup(minions)
                end,
                [3] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                        if flag then ForGroup(minions, function() SetUnitTalentLevel(GetEnumUnit(), "talent_tenacity_of_undead", 3) end)
                        else ForGroup(minions, function() SetUnitTalentLevel(GetEnumUnit(), "talent_tenacity_of_undead", 0) end) end
                    DestroyGroup(minions)
                end,
                cancel_last_level = true,
            },
            requires = { "talent_soul_remains", "talent_undead_expert" },
            max_level = 3,
        })

        NewTalentTemplate("talent_bone_spikes", {
            icon = "Talents\\BTNShoulders.blp",
            points_required = 2,
            instant_effects = {
                [1] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                    ForGroup(minions, function() ModifyStat(GetEnumUnit(), REFLECT_DAMAGE, 35, STRAIGHT_BONUS, flag) end)
                    DestroyGroup(minions)
                end,
                [2] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                    ForGroup(minions, function() ModifyStat(GetEnumUnit(), REFLECT_DAMAGE, 70, STRAIGHT_BONUS, flag) end)
                    DestroyGroup(minions)
                end,
                [3] = function(unit, flag)
                    local minions = GetAllUnitSummonUnits(unit)
                    ForGroup(minions, function() ModifyStat(GetEnumUnit(), REFLECT_DAMAGE, 105, STRAIGHT_BONUS, flag) end)
                    DestroyGroup(minions)
                end,
                cancel_last_level = true
            },
            requires = { "talent_tenacity_of_undead", "talent_undead_expert" },
            max_level = 3,
        })

        --tier 3
        NewTalentTemplate("talent_spirit", {
            icon = "Talents\\BTN_CR_death.blp",
            points_required = 4,
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.spirit_talent = nil
                        DestroyEffect(unit_data.spirit_sfx)
                        RemoveStatusBarState("talent_spirit", GetPlayerId(GetOwningPlayer(unit))+1)
                        if unit_data.spirit then KillUnit(unit_data.spirit) end
                    end
                end,
                [2] = function(unit, flag)
                    if not flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.spirit_talent = nil
                        DestroyEffect(unit_data.spirit_sfx)
                        RemoveStatusBarState("talent_spirit", GetPlayerId(GetOwningPlayer(unit))+1)
                        if unit_data.spirit then KillUnit(unit_data.spirit) end
                    end
                end,
                [3] = function(unit, flag)
                    if not flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.spirit_talent = nil
                        DestroyEffect(unit_data.spirit_sfx)
                        RemoveStatusBarState("talent_spirit", GetPlayerId(GetOwningPlayer(unit))+1)
                        if unit_data.spirit then KillUnit(unit_data.spirit) end
                    end
                end,
                cancel_last_level = true
            },
            requires = { "talent_pursuer", "talent_experienced_summoner" },
            max_level = 3,
        })

        NewTalentTemplate("talent_final_favor", {
            icon = "Talents\\BTNElderBlood.blp",
            points_required = 4,
            requires = { "talent_experienced_summoner", "talent_tenacity_of_undead" },
            max_level = 3,
        })

        NewTalentTemplate("talent_necromorph", {
            icon = "Talents\\BTNGrudge.blp",
            points_required = 4,
            requires = { "talent_tenacity_of_undead" },
            max_level = 3,
        })


        --tier 4
        NewTalentTemplate("talent_eternal_service", {
            icon = "Talents\\BTNGraveCall.blp",
            points_required = 6,
            requires = { "talent_spirit", "talent_final_favor", "talent_necromorph" },
            max_level = 1,
        })



        --tier 1
        NewTalentTemplate("talent_evasion", {
            icon = "Talents\\BTNEvadeNE.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, DODGE_CHANCE, 4, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, DODGE_CHANCE, 4, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, DODGE_CHANCE, 4, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_anatomy_master", {
            icon = "Talents\\BTNsadist.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, BONUS_HUMAN_DAMAGE, 7, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, BONUS_BEAST_DAMAGE, 7, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, POISON_BONUS, 10, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, BONUS_HUMAN_DAMAGE, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, BONUS_BEAST_DAMAGE, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, POISON_BONUS, 5, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 2,
        })

        NewTalentTemplate("talent_exhausting_venom", {
            icon = "Talents\\BTNPoisonGen.blp",
            max_level = 3,
        })

        NewTalentTemplate("talent_dagger_expert", {
            icon = "Talents\\BTNQinsSais.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    DaggerExpertTalentEffect(unit)
                end,
                [2] = function(unit, flag)
                    DaggerExpertTalentEffect(unit)
                end,
                [3] = function(unit, flag)
                    DaggerExpertTalentEffect(unit)
                end,
            },
            max_level = 2,
        })

        NewTalentTemplate("talent_pickpocket", {
            icon = "Talents\\BTNpickpocket.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, GOLD_BONUS, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, GOLD_BONUS, 5, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, GOLD_BONUS, 5, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 3,
        })


        NewTalentTemplate("talent_counterattack", {
            icon = "Talents\\BTNOS1.blp",
            points_required = 2,
            requires = { "talent_dagger_expert", "talent_evasion" },
            max_level = 2,
        })

        NewTalentTemplate("talent_into_the_shadows", {
            icon = "ReplaceableTextures\\PassiveButtons\\PASBTNEvasion.blp",
            max_level = 3,
        })

        NewTalentTemplate("talent_bloodthirsty", {
            icon = "Talents\\BTNbloodthirsty.blp",--"Talents\\BTNUkus.blp",
            max_level = 3,
            points_required = 4,
            requires = { "talent_relentless", "talent_counterattack" },
        })

        NewTalentTemplate("talent_relentless", {
            icon = "Talents\\BTNMeditation.blp",
            max_level = 3,
            points_required = 2,
            requires = { "talent_dagger_expert", "talent_pickpocket" },
        })

        NewTalentTemplate("talent_nimble_hands", {
            icon = "Talents\\BTNShuriken.blp",
            max_level = 3,
            points_required = 4,
            requires = { "talent_counterattack", "talent_weak_point" },
        })

        NewTalentTemplate("talent_unmatched_technique", {
            icon = "Talents\\BTNSlaugther Saber.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if not flag then
                        local unit_data = GetUnitData(unit)
                        unit_data.unmatched_technique_bonus = 0.
                        unit_data.last_used_skill = nil
                        RemoveBuff(unit, "A02Q")
                    end
                end,
            },
            max_level = 1,
            points_required = 4,
            requires = { "talent_bloodthirsty", "talent_ambush", "talent_nimble_hands" },
        })


        NewTalentTemplate("talent_ambush", {
            icon = "Talents\\BTNicons_4602_pas.blp",
            max_level = 3,
            instant_effects = {
              [1] = function(unit, flag)
                  if flag then
                      --AmbushTalentEffect(unit)
                  else
                      --local unit_data = GetUnitData(unit)
                      --DestroyTimer(unit_data.ambush_timer)
                      --unit_data.ambush_timer = nil
                      RemoveBuff(unit, "A02O")
                  end
              end,
              [2] = function(unit, flag)
                    if flag then
                        --AmbushTalentEffect(unit)
                    end
              end,
              [3] = function(unit, flag)
                    if flag then
                       -- AmbushTalentEffect(unit)
                    end
              end,
            },
            points_required = 4,
            requires = { "talent_relentless", "talent_counterattack", "talent_weak_point" },
        })

        NewTalentTemplate("talent_weak_point", {
            icon = "Talents\\BTN_CR_Heart-Strike.blp",
            max_level = 2,
            points_required = 2,
            requires = { "talent_evasion", "talent_exhausting_venom" },
        })

        NewTalentTemplate("talent_one_with_shadows", {
            icon = "Talents\\BTNicons_15644_btn.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, DARKNESS_RESIST, 7, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, DARKNESS_BONUS, 7, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, DARKNESS_RESIST, 7, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, DARKNESS_BONUS, 7, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, DARKNESS_RESIST, 7, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, DARKNESS_BONUS, 7, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_antimagic", {
            icon = "Talents\\BTNicons_15272_btn.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, LIGHTNING_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, FIRE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ICE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ARCANE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, DARKNESS_RESIST, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, LIGHTNING_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, FIRE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ICE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ARCANE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, DARKNESS_RESIST, 5, STRAIGHT_BONUS, flag)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, LIGHTNING_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, FIRE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ICE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, ARCANE_RESIST, 5, STRAIGHT_BONUS, flag)
                    ModifyStat(unit, DARKNESS_RESIST, 5, STRAIGHT_BONUS, flag)
                end,
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_vampiric_mark", {
            icon = "Talents\\BTN_CR_Blood-Tap.blp",
            max_level = 2,
        })

        NewTalentTemplate("talent_deeping_darkness", {
            icon = "Talents\\BTNShadowDisguise.blp",
            points_required = 2,
            requires = { "talent_one_with_shadows", "talent_vampiric_mark" },
            max_level = 2,
        })

        NewTalentTemplate("talent_shackles", {
            icon = "Talents\\BTNEnslaveUndead.blp",
            points_required = 2,
            requires = { "talent_one_with_shadows", "talent_vampiric_mark", "talent_antimagic" },
            max_level = 2,
        })

        NewTalentTemplate("talent_magic_devourer", {
            icon = "Talents\\BTNRavageMagic.blp",
            points_required = 2,
            requires = { "talent_vampiric_mark", "talent_antimagic" },
            max_level = 3,
        })

        NewTalentTemplate("talent_in_the_dark", {
            icon = "Talents\\BTNCR_Blindness.blp",
            points_required = 4,
            requires = { "talent_deeping_darkness", "talent_shackles" },
            max_level = 2,
        })

        NewTalentTemplate("talent_torture", {
            icon = "Talents\\BTNHandOfDisgrace.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, DAMAGE_TO_CC_ENEMIES, 10, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, DAMAGE_TO_CC_ENEMIES, 7, STRAIGHT_BONUS, flag)
                end,
            },
            points_required = 4,
            requires = { "talent_deeping_darkness", "talent_shackles", "talent_magic_devourer" },
            max_level = 2,
        })

        NewTalentTemplate("talent_nightstalker", {
            icon = "Talents\\BTNTransfer Pain.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 0.95, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, HP_PER_HIT, 5, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 0.93, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, HP_PER_HIT, 7, STRAIGHT_BONUS, flag)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, HP_VALUE, 0.9, MULTIPLY_BONUS, flag)
                    ModifyStat(unit, HP_PER_HIT, 10, STRAIGHT_BONUS, flag)
                end,
            },
            cancel_last_level = true,
            points_required = 4,
            requires = { "talent_shackles", "talent_magic_devourer" },
            max_level = 3,
        })

        NewTalentTemplate("talent_erupting_darkness", {
            icon = "Talents\\BTNShadowMeld.blp",
            points_required = 6,
            requires = { "talent_in_the_dark", "talent_torture", "talent_nightstalker" },
            max_level = 1,
        })


        NewTalentTemplate("talent_archery_master", {
            icon = "Talents\\BTNSpellBookPreface_23.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    ModifyStat(unit, CRIT_CHANCE, 5, STRAIGHT_BONUS, flag)
                    --BowExpertTalentEffect(unit)
                end,
                [2] = function(unit, flag)
                    ModifyStat(unit, CRIT_CHANCE, 5, STRAIGHT_BONUS, flag)
                    --BowExpertTalentEffect(unit)
                end,
                [3] = function(unit, flag)
                    ModifyStat(unit, CRIT_CHANCE, 5, STRAIGHT_BONUS, flag)
                    --BowExpertTalentEffect(unit)
                end,
            },
            max_level = 3,
        })

        NewTalentTemplate("talent_clear_sight", {
            icon = "Talents\\BTNAccuracy.blp",
            instant_effects = {
                [1] = function(unit, flag)
                    if flag then
                        ClearSightTalentEffect(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        DestroyTimer(unit_data.clear_sight_timer)
                        unit_data.clear_sight_timer = nil
                        RemoveBuff(unit, "A02R")
                    end
                end,
                [2] = function(unit, flag)
                    if flag then
                        ClearSightTalentEffect(unit)
                    else
                        local unit_data = GetUnitData(unit)
                        DestroyTimer(unit_data.clear_sight_timer)
                        unit_data.clear_sight_timer = nil
                        RemoveBuff(unit, "A02R")
                    end
                end,
            },
            cancel_last_level = true,
            max_level = 2,
        })

        NewTalentTemplate("talent_trauma", {
            icon = "Talents\\BTN_cr_cara9.blp",
            points_required = 2,
            requires = { "talent_archery_master" },
            max_level = 3,
        })

        NewTalentTemplate("talent_hawkeye", {
            icon = "Talents\\BTNicons_11543_btn.blp",
            points_required = 2,
            requires = { "talent_archery_master", "talent_clear_sight" },
            max_level = 3,
        })

        NewTalentTemplate("talent_tactician", {
            icon = "Talents\\BTNFadeStrike.blp",
            points_required = 2,
            requires = { "talent_clear_sight", "talent_anatomy_master" },
            max_level = 3,
        })

        NewTalentTemplate("talent_enchanter", {
            icon = "Talents\\BTNinnerflamebuff.blp",
            points_required = 2,
            requires = { "talent_tactician", "talent_anatomy_master" },
            max_level = 2,
        })

        NewTalentTemplate("talent_forceful_hit", {
            icon = "Talents\\BTNicons_11465_btn.blp",
            points_required = 4,
            requires = { "talent_trauma", "talent_hawkeye" },
            max_level = 2,
        })

        NewTalentTemplate("talent_unremarkable_marksman", {
            icon = "Talents\\BTNAimForBlood.blp",
            points_required = 4,
            requires = { "talent_hawkeye", "talent_tactician" },
            max_level = 2,
        })

        NewTalentTemplate("talent_fast_reload", {
            icon = "Talents\\BTNRapid Fire.blp",
            requires = { "talent_enchanter", "talent_tactician" },
            points_required = 4,
            max_level = 3,
        })

        NewTalentTemplate("talent_penetrate", {
            icon = "Talents\\BTNCriticalWound.blp",
            points_required = 6,
            requires = { "talent_forceful_hit", "talent_unremarkable_marksman", "talent_fast_reload" },
            max_level = 2,
        })



        ClassTalents = {
            [BARBARIAN_CLASS] = {
                [SKILL_CATEGORY_FIGHTING_MASTERY] = {
                    [1] = { "talent_blade_dance", "talent_strong_will", "talent_sweeping_strikes", },
                    [2] = { "talent_rage", "talent_strong_body", "talent_reflexes", },
                    [3] = { "talent_breaking_defence", "talent_pain_killer", "talent_momentum", },
                    [4] = { "talent_carnage", },
                },
                [SKILL_CATEGORY_BATTLE_ADVANTAGE] = {
                    [1] = { "talent_sharpened_blade", "talent_herbs", "talent_hard_training", },
                    [2] = { "talent_elbow_strike", "talent_disadvantage", "talent_bigger_they_are", },
                    [3] = { "talent_disorientation", "talent_opportunity", "talent_lining_armor", },
                    [4] = { "talent_penetration" }
                },
                [SKILL_CATEGORY_INNER_STRENGTH] = {
                    [1] = { "talent_hardening", "talent_fracture", "talent_well_being", },
                    [2] = { "talent_reinforce", "talent_adrenaline", "talent_anger_impulse", "talent_inevitability" },
                    [3] = { "talent_vulnerability", "talent_pressure_point", "talent_intimidation", },
                    [4] = { "talent_second_wind" }
                },
            },
            [SORCERESS_CLASS] = {
                [SKILL_CATEGORY_FIRE] = {
                    [1] = { "talent_ignite", "talent_inner_warmth", "talent_thaw", },
                    [2] = { "talent_burnout", "talent_overflow", "talent_heating_up", },
                    [3] = { "talent_heat", "talent_incinerate", "talent_napalm", },
                    [4] = { "talent_hell_flames", "talent_apocalypse" },
                    background = "UI\\test_fire_back.blp"
                },
                [SKILL_CATEGORY_LIGHTNING] = {
                    [1] = { "talent_flash", "talent_negative_charge", "talent_positive_charge", },
                    [2] = { "talent_lightning_rod", "talent_voltage", "talent_arc_discharge", },
                    [3] = { "talent_feedback", "talent_induction", "talent_extra_charge", },
                    [4] = { "talent_shock", "talent_disintegration" },
                    [5] = { "talent_convulsions" },
                    background = "UI\\test_lightning_back.blp"
                },
                [SKILL_CATEGORY_ICE] = {
                    [1] = { "talent_remorseless", "talent_crystallization", "talent_ice_crust", },
                    [2] = { "talent_glaciation", "talent_breath_of_frost", "talent_icy_veins", },
                    [3] = { "talent_deep_freeze", "talent_heat_transfer", "talent_fragility", },
                    [4] = { "talent_ice_enduring", },
                    background = "UI\\test_ice_back.blp"
                },
            },
            [NECROMANCER_CLASS] = {
                [SKILL_CATEGORY_DARK_ART] = {
                    [1] = { "talent_durable_bones", "talent_forbidden_knowledge", "talent_toxicity" },
                    [2] = { "talent_life_steal", "talent_death_embrace", "talent_lesion" },
                    [3] = { "talent_ritual", "talent_blood_pact" , "talent_abyss_awakens" },
                    [4] = { "talent_cheat_death", "talent_grave_cold" }
                },
                [SKILL_CATEGORY_CURSES] = {
                    [1] = { "talent_frailty", "talent_spiritual_vessel", "talent_death_march" },
                    [2] = { "talent_amplify_damage", "talent_face_of_death", "talent_bargain" },
                    [3] = { "talent_insanity", "talent_persistent_curse", "talent_vile_malediction" },
                    [4] = { "talent_sudden_death" }
                },
                [SKILL_CATEGORY_SUMMONING] = {
                    [1] = { "talent_leeches", "talent_soul_remains", "talent_undead_expert" },
                    [2] = { "talent_pursuer", "talent_experienced_summoner", "talent_tenacity_of_undead", "talent_bone_spikes" },
                    [3] = { "talent_spirit", "talent_final_favor", "talent_necromorph" },
                    [4] = { "talent_eternal_service" }
                }
            },
            [ASSASSIN_CLASS] = {
                [SKILL_CATEGORY_LETHALITY] = {
                    { "talent_pickpocket", "talent_dagger_expert", "talent_evasion", "talent_exhausting_venom" },
                    { "talent_relentless", "talent_counterattack", "talent_weak_point" },
                    { "talent_bloodthirsty", "talent_ambush", "talent_nimble_hands" },
                    { "talent_unmatched_technique" },
                },
                [SKILL_CATEGORY_SHADOWS] = {
                    { "talent_one_with_shadows", "talent_vampiric_mark", "talent_antimagic" },
                    { "talent_deeping_darkness", "talent_shackles", "talent_magic_devourer" },
                    { "talent_in_the_dark", "talent_torture", "talent_nightstalker" },
                    { "talent_erupting_darkness" },
                },
                [SKILL_CATEGORY_BOW] = {
                    { "talent_archery_master", "talent_clear_sight", "talent_anatomy_master" },
                    { "talent_trauma", "talent_hawkeye", "talent_tactician", "talent_enchanter" },
                    { "talent_forceful_hit", "talent_unremarkable_marksman", "talent_fast_reload" },
                    { "talent_penetrate" },
                }
            }
        }

    end

end