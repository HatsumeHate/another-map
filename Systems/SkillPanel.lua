---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Stasik.
--- DateTime: 30.12.2019 14:00
---
do

    SkillPanelFrame = 0
    SkillPanelButton = 0
    local BackupButtonData
    SkillPanelTutorialData = 0

    local ClickTrigger = 0
    local EnterTrigger = 0
    local LeaveTrigger = 0

    local SKILL_BUTTON = 0
    ProjectionKeyButtonTrigger = 0
    PlayerProjection = 0

    local last_EnteredFrame
    local last_EnteredFrameTimer
    SkillPanelKeybindActive = false


    ---@param player integer
    ---@param button_data table
    ---@param skip_key integer
    function CreateBindContext(player, button_data, skip_key)

        for key = KEY_Q, KEY_F do
            if skip_key ~= key then
                AddContextOption(player, KEYBIND_LIST[key].bind_name, function()
                    RegisterPlayerSkillHotkey(player, button_data.skill, key)
                end)
            end
        end

    end


    ---@param player integer
    ---@param skill table
    function UnregisterPlayerSkillHotkey(player, skill)

        for i = KEY_Q, KEY_F do
            local button = GetButtonData(SkillPanelFrame[player].button_keys[i])

                if button.skill and skill.Id == button.skill.Id and not (BlzGetUnitAbilityCooldownRemaining(PlayerHero[player], GetKeybindKeyAbility(FourCC(skill.Id), player)) > 0.) then
                    local unit_data = GetUnitData(PlayerHero[player])
                    local player_skill = GetUnitSkillData(PlayerHero[player], skill.Id)

                    if unit_data.channeled_ability and unit_data.channeled_ability == skill.Id then
                        unit_data.channeled_destructor(PlayerHero[player])
                    end

                    if player_skill.summoned_group then
                        ForGroup(player_skill.summoned_group, function()
                            KillUnit(GetEnumUnit())
                            GroupRemoveUnit(player_skill.summoned_group, GetEnumUnit())
                        end)
                    end
                    --print("skill is found, trying to unbind")
                    UnbindAbilityKey(PlayerHero[player], skill.Id)
                    OnSkillUnbind(PlayerHero[player], skill)
                    --print("skill is unbinded")
                    BlzFrameSetTexture(button.image, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0, true)
                    FrameChangeTexture(button.button, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp")
                    BlzFrameSetVisible(button.sprite, false)
                    button.skill = nil
                    break
                end

        end

    end


    ---@param player integer
    ---@param skill table
    ---@param key integer
    function RegisterPlayerSkillHotkey(player, skill, key)
        local key_button_data = GetButtonData(SkillPanelFrame[player].button_keys[key])
        local ability = GetKeybindKeyAbility(FourCC(skill.Id), player)

            if (ability == 0 or (ability ~= 0 and not (BlzGetUnitAbilityCooldownRemaining(PlayerHero[player], ability) > 0.))) and not (BlzGetUnitAbilityCooldownRemaining(PlayerHero[player], KEYBIND_LIST[key].ability) > 0.) then
                UnregisterPlayerSkillHotkey(player, skill)
                if key_button_data.skill then UnregisterPlayerSkillHotkey(player, key_button_data.skill) end
                BindAbilityKey(PlayerHero[player], skill.Id, key)
                OnSkillBind(PlayerHero[player], skill)
                BlzFrameSetTexture(key_button_data.image, skill.icon, 0, true)
                FrameChangeTexture(key_button_data.button, skill.icon)
                key_button_data.skill = skill
                DisableTrigger(SkillPanelFrame[player].key_trigger)
                for i = 1, 6 do EnableTrigger(KEYBIND_LIST[i].trigger) end
                BlzFrameSetVisible(key_button_data.sprite, true)
                --print("ability " .. key_button_data.skill.name .." is binded")
                --print("ability " .. key_button_data.skill.name .." id is " .. key_button_data.skill.Id)
            end

    end


    ---@param player integer
    function UpdateSkillWindow(player)
        local max_skill_count = #SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].skill_list

            if max_skill_count == nil or max_skill_count <= 0 then
                max_skill_count = 1
            end

            BlzFrameSetMinMaxValue(SkillPanelFrame[player].slider, 1., max_skill_count)
            local current_position = max_skill_count - SkillPanelFrame[player].slider_value

            for i = 1, 4 do
                local button_data = GetButtonData(SkillPanelFrame[player].displayed_skill_button[i])
                local position = current_position + i

                    if position <= max_skill_count and SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].skill_list[position] ~= nil then

                        button_data.skill = SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].skill_list[position]
                        BlzFrameSetTexture(button_data.image, button_data.skill.icon, 0, true)
                        FrameChangeTexture(button_data.button, button_data.skill.icon)
                        if GetLocalPlayer() == Player(player-1) then BlzFrameSetVisible(SkillPanelFrame[player].displayed_skill_button[i], true) end
                        BlzFrameSetText(button_data.name_text, button_data.skill.name)
                        if button_data.skill.short_name then BlzFrameSetScale(button_data.name_text, 0.7)
                        else BlzFrameSetScale(button_data.name_text, 0.86) end
                        BlzFrameSetText(button_data.level_text, LOCALE_LIST[my_locale].SKILL_PANEL_LVL_TEXT .. UnitGetAbilityLevel(PlayerHero[player], button_data.skill.Id))

                    else
                        button_data.skill = nil
                        BlzFrameSetVisible(SkillPanelFrame[player].displayed_skill_button[i], false)
                    end

            end

    end


    ---@param player integer
    function UpdateSkillList(player)
        local unit_data = GetUnitData(PlayerHero[player])
        local c = SkillPanelFrame[player].current_category or CLASS_SKILL_CATEGORY[unit_data.unit_class][1]

            SkillPanelFrame[player].category[c].skill_list = nil
            SkillPanelFrame[player].category[c].skill_list = {}

            for skill = 1, #unit_data.skill_list do
                if unit_data.skill_list[skill].category == CLASS_SKILL_CATEGORY[unit_data.unit_class][c] then
                    SkillPanelFrame[player].category[c].skill_list[#SkillPanelFrame[player].category[c].skill_list + 1] = unit_data.skill_list[skill]
                end
            end

            BlzFrameSetMinMaxValue(SkillPanelFrame[player].slider, 1., #SkillPanelFrame[player].category[c].skill_list)
            BlzFrameSetValue(SkillPanelFrame[player].slider, #SkillPanelFrame[player].category[c].skill_list)
            local last_category_button = GetButtonData(SkillPanelFrame[player].category[c].button)
            if GetLocalPlayer() == Player(player-1) then BlzFrameSetVisible(last_category_button.sprite, true) end


        UpdateSkillWindow(player)
    end



    ---@param button_type number
    ---@param texture string
    ---@param size_x real
    ---@param size_y real
    ---@param relative_frame framehandle
    ---@param frame_point_from framepointtype
    ---@param frame_point_to framepointtype
    ---@param offset_x real
    ---@param offset_y real
    ---@param parent_frame framehandle
    local function NewButton(button_type, texture, size_x, size_y, relative_frame, frame_point_from, frame_point_to, offset_x, offset_y, parent_frame)
        local new_Frame = BlzCreateFrame('ScriptDialogButton', parent_frame, 0, 0)
        local new_FrameImage = BlzCreateFrameByType("BACKDROP", "ButtonIcon", new_Frame, "", 0)
        local handle = new_Frame

            ButtonList[handle] = {
                button_type = button_type,
                skill = nil,
                button = new_Frame,
                image = new_FrameImage,
                original_texture = texture,
                sprite = nil
            }

            FrameRegisterNoFocus(new_Frame)
            FrameRegisterClick(new_Frame, texture)

            BlzTriggerRegisterFrameEvent(ClickTrigger, new_Frame, FRAMEEVENT_CONTROL_CLICK)
            BlzTriggerRegisterFrameEvent(EnterTrigger, new_Frame, FRAMEEVENT_MOUSE_ENTER)
            BlzTriggerRegisterFrameEvent(LeaveTrigger, new_Frame, FRAMEEVENT_MOUSE_LEAVE)


            if button_type == SKILL_BUTTON then
                --local new_FrameBackground = BlzCreateFrameByType("BACKDROP", "Skill background", new_FrameImage, "", 0)
                local new_FrameText = BlzCreateFrameByType("TEXT", "skill name", new_FrameImage, "MyTextTemplateMedium", 0)
                local new_FrameLevelText = BlzCreateFrameByType("TEXT", "skill level", new_FrameImage, "MyTextTemplateMedium", 0)
                local new_FrameBorder = BlzCreateFrameByType("BACKDROP", "ButtonBorder", new_FrameImage, "", 0)

                    --BlzFrameSetTexture(new_FrameBackground, "UI\\basic_bar.blp", 0, true)

                    BlzFrameSetTextAlignment(new_FrameText, TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_LEFT)
                    BlzFrameSetPoint(new_FrameText, FRAMEPOINT_LEFT, new_FrameImage, FRAMEPOINT_RIGHT, 0.007, 0.008)
                    BlzFrameSetScale(new_FrameText, 0.84) -- 93


                    BlzFrameSetTextAlignment(new_FrameLevelText, TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_LEFT)
                    BlzFrameSetPoint(new_FrameLevelText, FRAMEPOINT_LEFT, new_FrameImage, FRAMEPOINT_RIGHT, 0.007, -0.005)
                    BlzFrameSetScale(new_FrameLevelText, 0.91) -- 1.03

                    ButtonList[handle].name_text = new_FrameText
                    ButtonList[handle].level_text = new_FrameLevelText

                    BlzFrameSetTexture(new_FrameBorder, "DiabolicUI_Button_50x50_BorderHighlight.tga", 0, true)
                    BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_TOPRIGHT, new_Frame, FRAMEPOINT_TOPRIGHT, 0.0074, 0.0074)
                    BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_BOTTOMLEFT, new_Frame, FRAMEPOINT_BOTTOMLEFT, -0.0074, -0.0074)
            elseif button_type > 0 then
                local new_FrameBorder = BlzCreateFrameByType("BACKDROP", "ButtonBorder", new_FrameImage, "", 0)

                BlzFrameSetSize(new_FrameBorder, size_x, size_y)
                BlzFrameSetTexture(new_FrameBorder, "UI\\inventory_frame.blp", 0, true)
                BlzFrameSetAllPoints(new_FrameBorder, new_FrameImage)
                local new_FrameCharges = BlzCreateFrameByType("BACKDROP", "ButtonCharges", new_FrameImage, "", 0)
                local new_FrameChargesBorder = BlzCreateFrameByType("BACKDROP", "Border", new_FrameCharges, "", 0)
                local sprite = CreateSpriteNoCollision("UI\\aganim_sprite.mdx", 0.65, new_Frame, FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, -0.0048, -0.0048, new_Frame)

                ButtonList[handle].sprite = sprite
                BlzFrameSetVisible(sprite, false)

                local new_FrameText = BlzCreateFrameByType("TEXT", "hotkey", new_FrameCharges, "", 0)

                    BlzFrameSetPoint(new_FrameCharges, FRAMEPOINT_BOTTOMRIGHT, new_FrameImage, FRAMEPOINT_BOTTOMRIGHT, -0.002, 0.002)
                    BlzFrameSetSize(new_FrameCharges, 0.012, 0.012)
                    BlzFrameSetTexture(new_FrameCharges, "GUI\\ChargesTexture.blp", 0, true)

                    BlzFrameSetTextAlignment(new_FrameText, TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE)
                    BlzFrameSetPoint(new_FrameText, FRAMEPOINT_CENTER, new_FrameCharges, FRAMEPOINT_CENTER, 0., 0.)
                    BlzFrameSetScale(new_FrameText, 0.98)

                    BlzFrameSetSize(new_FrameChargesBorder, 1., 1.)
                    BlzFrameSetTexture(new_FrameChargesBorder, "UI\\inventory_frame.blp", 0, true)
                    BlzFrameSetAllPoints(new_FrameChargesBorder, new_FrameCharges)


                    if button_type == KEY_Q then BlzFrameSetText(new_FrameText, "Q")
                    elseif button_type == KEY_W then BlzFrameSetText(new_FrameText, "W")
                    elseif button_type == KEY_E then BlzFrameSetText(new_FrameText, "E")
                    elseif button_type == KEY_R then BlzFrameSetText(new_FrameText, "R")
                    elseif button_type == KEY_D then BlzFrameSetText(new_FrameText, "D")
                    elseif button_type == KEY_F then BlzFrameSetText(new_FrameText, "F") end
            else
                local new_FrameBorder = BlzCreateFrameByType("BACKDROP", "ButtonBorder", new_FrameImage, "", 0)

                    BlzFrameSetSize(new_FrameBorder, size_x, size_y)
                    BlzFrameSetTexture(new_FrameBorder, "UI\\inventory_frame.blp", 0, true)
                    BlzFrameSetAllPoints(new_FrameBorder, new_FrameImage)

            end

            BlzFrameSetPoint(new_Frame, frame_point_from, relative_frame, frame_point_to, offset_x, offset_y)
            BlzFrameSetSize(new_Frame, size_x, size_y)
            BlzFrameSetTexture(new_FrameImage, texture, 0, true)
            BlzFrameSetAllPoints(new_FrameImage, new_Frame)

        return new_Frame
    end


    function ReloadSkillPanelFrames()
        for player = 1, 6 do
            if PlayerHero[player] then
                local main_frame = BlzCreateFrame('EscMenuBackdrop', GAME_UI, 0, 0)
                local new_Frame
                local unit_data = GetUnitData(PlayerHero[player])

                    BlzFrameSetPoint(main_frame, FRAMEPOINT_TOPLEFT, GAME_UI, FRAMEPOINT_TOPLEFT, 0., -0.08)
                    BlzFrameSetSize(main_frame, 0.28, 0.31)


                    local category_border_panel = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
                    BlzFrameSetPoint(category_border_panel, FRAMEPOINT_TOPLEFT, main_frame, FRAMEPOINT_TOPLEFT, 0.015, -0.015)
                    BlzFrameSetSize(category_border_panel, BlzFrameGetWidth(main_frame) - (BlzFrameGetWidth(main_frame) * 0.75), BlzFrameGetHeight(main_frame) * 0.64)


                    for i = 1, #CLASS_SKILL_CATEGORY[unit_data.unit_class] do
                        local local_category = CLASS_SKILL_CATEGORY[unit_data.unit_class][i]
                        local icon_path = SKILL_CATEGORY_ICON[local_category]


                            if i == 1 then
                                SkillPanelFrame[player].category[i].button = NewButton(-1, icon_path, 0.035, 0.035, category_border_panel, FRAMEPOINT_TOP, FRAMEPOINT_TOP, 0., -0.02, main_frame)
                                local button_data = GetButtonData(SkillPanelFrame[player].category[i].button)
                                button_data.sprite = CreateSprite("selecter2.mdx", 0.9, SkillPanelFrame[player].category[i].button, FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02, button_data.image)
                                BlzFrameSetVisible(button_data.sprite, false)
                            else
                                SkillPanelFrame[player].category[i].button = NewButton(i * -1, icon_path, 0.035, 0.035, SkillPanelFrame[player].category[i-1].button, FRAMEPOINT_TOP, FRAMEPOINT_BOTTOM, 0., -0.0055, SkillPanelFrame[player].category[i-1].button)
                                local button_data = GetButtonData(SkillPanelFrame[player].category[i].button)
                                button_data.sprite = CreateSprite("selecter2.mdx", 0.9, SkillPanelFrame[player].category[i].button, FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02, button_data.image)
                                BlzFrameSetVisible(button_data.sprite, false)
                            end

                        SkillPanelFrame[player].category_tooltip[i] = CreateTooltip(GetSkillCategoryName(local_category), "", SkillPanelFrame[player].category[i].button, 0.13, 0.03, FRAMEPOINT_TOPLEFT, FRAMEPOINT_BOTTOMRIGHT)

                    end


                    local skill_bind_panel = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
                    BlzFrameSetPoint(skill_bind_panel, FRAMEPOINT_BOTTOMLEFT, main_frame, FRAMEPOINT_BOTTOMLEFT, 0.015, 0.015)
                    BlzFrameSetPoint(skill_bind_panel, FRAMEPOINT_BOTTOMRIGHT, main_frame, FRAMEPOINT_BOTTOMRIGHT, -0.015, 0.015)
                    BlzFrameSetSize(skill_bind_panel, 0.1, 0.07)


                    SkillPanelFrame[player].button_keys[KEY_Q] = NewButton(KEY_Q, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.035, 0.035, skill_bind_panel, FRAMEPOINT_LEFT, FRAMEPOINT_LEFT, 0.017, 0., main_frame)
                    local button_data = GetButtonData(SkillPanelFrame[player].button_keys[KEY_Q])
                    button_data.skill = BackupButtonData[player][KEY_Q].skill or nil
                    BackupButtonData[player][KEY_Q] = button_data

                    if BackupButtonData[player][KEY_Q].skill then
                        BlzFrameSetTexture(button_data.image, BackupButtonData[player][KEY_Q].skill.icon, 0, true)
                        FrameChangeTexture(button_data.button, BackupButtonData[player][KEY_Q].skill.icon)
                    end

                        for key = 2, KEY_F do
                            SkillPanelFrame[player].button_keys[key] = NewButton(key, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.035, 0.035, SkillPanelFrame[player].button_keys[key-1], FRAMEPOINT_LEFT, FRAMEPOINT_RIGHT, 0.0012, 0., SkillPanelFrame[player].button_keys[key-1])
                            local button_data = GetButtonData(SkillPanelFrame[player].button_keys[key])
                            button_data.skill = BackupButtonData[player][key].skill or nil
                            BackupButtonData[player][key] = button_data
                            if BackupButtonData[player][key].skill then
                                BlzFrameSetTexture(button_data.image, BackupButtonData[player][key].skill.icon, 0, true)
                                FrameChangeTexture(button_data.button, BackupButtonData[player][key].skill.icon)
                            end
                        end


                    local last_frame

                    for i = 1, 4 do
                        new_Frame = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)

                            if i == 1 then
                                BlzFrameSetPoint(new_Frame, FRAMEPOINT_TOPLEFT, category_border_panel, FRAMEPOINT_TOPRIGHT, -0.006, 0.)
                            else
                                BlzFrameSetPoint(new_Frame, FRAMEPOINT_TOP, last_frame, FRAMEPOINT_BOTTOM, 0., 0.01)
                            end

                        BlzFrameSetSize(new_Frame, 0.18, 0.06)

                        local new_FrameBackground = BlzCreateFrameByType("BACKDROP", "Skill background", new_Frame, "", 0)
                        BlzFrameSetPoint(new_FrameBackground, FRAMEPOINT_BOTTOMLEFT, new_Frame, FRAMEPOINT_BOTTOMLEFT, 0.015, 0.0145)
                        BlzFrameSetPoint(new_FrameBackground, FRAMEPOINT_TOPRIGHT, new_Frame, FRAMEPOINT_TOPRIGHT, -0.015, -0.0145)
                        BlzFrameSetTexture(new_FrameBackground, "UI\\basic_bar.blp", 0, true)

                        SkillPanelFrame[player].displayed_skill_button[i] = NewButton(SKILL_BUTTON, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.03, 0.03, new_Frame, FRAMEPOINT_LEFT, FRAMEPOINT_LEFT, 0.015, 0., new_Frame)
                        BlzFrameSetVisible(SkillPanelFrame[player].displayed_skill_button[i], false)
                        last_frame = new_Frame
                    end


                    new_Frame = BlzCreateFrameByType("SLIDER", "ASD", main_frame, "QuestMainListScrollBar", 0)
                    BlzFrameClearAllPoints(new_Frame)
                    BlzFrameSetMinMaxValue(new_Frame, 1, 1)
                    BlzFrameSetValue(new_Frame, 1)
                    BlzFrameSetStepSize(new_Frame, 1)
                    BlzFrameSetPoint(new_Frame, FRAMEPOINT_RIGHT, main_frame, FRAMEPOINT_RIGHT, -0.015, 0.035)
                    BlzFrameSetSize(new_Frame, 0.015, 0.2)

                    SkillPanelFrame[player].slider = new_Frame
                    BlzTriggerRegisterFrameEvent(SkillPanelFrame[player].slider_trigger, SkillPanelFrame[player].slider, FRAMEEVENT_SLIDER_VALUE_CHANGED)
                    TriggerAddAction(SkillPanelFrame[player].slider_trigger, function ()

                            if BlzGetTriggerFrameEvent() == FRAMEEVENT_MOUSE_WHEEL then
                                if BlzGetTriggerFrameValue() > 0 then
                                    SkillPanelFrame[player].slider_value = SkillPanelFrame[player].slider_value + 1
                                    if SkillPanelFrame[player].slider_value > #SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].skill_list then
                                        SkillPanelFrame[player].slider_value = #SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].skill_list
                                    end
                                    BlzFrameSetValue(SkillPanelFrame[player].slider, SkillPanelFrame[player].slider_value)
                                else
                                    SkillPanelFrame[player].slider_value = SkillPanelFrame[player].slider_value - 1
                                    if SkillPanelFrame[player].slider_value < 1 then SkillPanelFrame[player].slider_value = 1 end
                                    BlzFrameSetValue(SkillPanelFrame[player].slider, SkillPanelFrame[player].slider_value)
                                end
                            else
                                SkillPanelFrame[player].slider_value = BlzGetTriggerFrameValue()
                            end

                            UpdateSkillWindow(player)
                        end)

                    BlzTriggerRegisterFrameEvent(SkillPanelFrame[player].slider_trigger, SkillPanelFrame[player].slider, FRAMEEVENT_MOUSE_WHEEL)


                SkillPanelFrame[player].tooltip = NewTooltip(SkillPanelFrame[player].slider, "MyTextTemplateMedium")

                SkillPanelFrame[player].main_frame = main_frame
                SkillPanelFrame[player].state = false
                BlzFrameSetVisible(SkillPanelFrame[player].main_frame, false)
            end
        end
    end


    ---@param player integer
    function DrawSkillPanel(player)
        local main_frame = BlzCreateFrame('EscMenuBackdrop', GAME_UI, 0, 0)
        local new_Frame
        local unit_data = GetUnitData(PlayerHero[player])

            SkillPanelFrame[player] = {}

            BlzFrameSetPoint(main_frame, FRAMEPOINT_TOPLEFT, GAME_UI, FRAMEPOINT_TOPLEFT, 0., -0.08)
            BlzFrameSetSize(main_frame, 0.28, 0.31)


            local category_border_panel = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
            BlzFrameSetPoint(category_border_panel, FRAMEPOINT_TOPLEFT, main_frame, FRAMEPOINT_TOPLEFT, 0.015, -0.015)
            BlzFrameSetSize(category_border_panel, BlzFrameGetWidth(main_frame) - (BlzFrameGetWidth(main_frame) * 0.75), BlzFrameGetHeight(main_frame) * 0.64)


            BackupButtonData[player] = {}
            SkillPanelFrame[player].category = {}
            SkillPanelFrame[player].category_tooltip = {}
            SkillPanelFrame[player].current_category = 1

            for i = 1, #CLASS_SKILL_CATEGORY[unit_data.unit_class] do
                local local_category = CLASS_SKILL_CATEGORY[unit_data.unit_class][i]
                local icon_path = SKILL_CATEGORY_ICON[local_category]

                SkillPanelFrame[player].category[i] = {}
                SkillPanelFrame[player].category[i].skill_list = {}

                    if i == 1 then
                        SkillPanelFrame[player].category[i].button = NewButton(-1, icon_path, 0.035, 0.035, category_border_panel, FRAMEPOINT_TOP, FRAMEPOINT_TOP, 0., -0.02, main_frame)
                        local button_data = GetButtonData(SkillPanelFrame[player].category[i].button)
                        button_data.sprite = CreateSprite("selecter2.mdx", 0.9, SkillPanelFrame[player].category[i].button, FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02, button_data.image)
                        BlzFrameSetVisible(button_data.sprite, false)
                    else
                        SkillPanelFrame[player].category[i].button = NewButton(i * -1, icon_path, 0.035, 0.035, SkillPanelFrame[player].category[i-1].button, FRAMEPOINT_TOP, FRAMEPOINT_BOTTOM, 0., -0.0055, SkillPanelFrame[player].category[i-1].button)
                        local button_data = GetButtonData(SkillPanelFrame[player].category[i].button)
                        button_data.sprite = CreateSprite("selecter2.mdx", 0.9, SkillPanelFrame[player].category[i].button, FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02, button_data.image)
                        BlzFrameSetVisible(button_data.sprite, false)
                    end

                SkillPanelFrame[player].category_tooltip[i] = CreateTooltip(GetSkillCategoryName(local_category), "", SkillPanelFrame[player].category[i].button, 0.13, 0.03, FRAMEPOINT_TOPLEFT, FRAMEPOINT_BOTTOMRIGHT)

            end


            local skill_bind_panel = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
            BlzFrameSetPoint(skill_bind_panel, FRAMEPOINT_BOTTOMLEFT, main_frame, FRAMEPOINT_BOTTOMLEFT, 0.015, 0.015)
            BlzFrameSetPoint(skill_bind_panel, FRAMEPOINT_BOTTOMRIGHT, main_frame, FRAMEPOINT_BOTTOMRIGHT, -0.015, 0.015)
            BlzFrameSetSize(skill_bind_panel, 0.1, 0.07)


            SkillPanelFrame[player].button_keys = {}
            SkillPanelFrame[player].button_keys[KEY_Q] = NewButton(KEY_Q, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.035, 0.035, skill_bind_panel, FRAMEPOINT_LEFT, FRAMEPOINT_LEFT, 0.017, 0., main_frame)
            BackupButtonData[player][KEY_Q] = GetButtonData(SkillPanelFrame[player].button_keys[KEY_Q])
            --BlzTriggerRegisterFrameEvent(ProjectionKeyButtonTrigger, SkillPanelFrame[player].button_keys[KEY_Q], FRAMEEVENT_MOUSE_ENTER)
            --BlzTriggerRegisterFrameEvent(ProjectionKeyButtonTrigger, SkillPanelFrame[player].button_keys[KEY_Q], FRAMEEVENT_MOUSE_LEAVE)

                for key = 2, KEY_F do
                    SkillPanelFrame[player].button_keys[key] = NewButton(key, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.035, 0.035, SkillPanelFrame[player].button_keys[key-1], FRAMEPOINT_LEFT, FRAMEPOINT_RIGHT, 0.0012, 0., SkillPanelFrame[player].button_keys[key-1])
                    BackupButtonData[player][key] = GetButtonData(SkillPanelFrame[player].button_keys[key])
                    --BlzTriggerRegisterFrameEvent(ProjectionKeyButtonTrigger, SkillPanelFrame[player].button_keys[key], FRAMEEVENT_MOUSE_ENTER)
                    --BlzTriggerRegisterFrameEvent(ProjectionKeyButtonTrigger, SkillPanelFrame[player].button_keys[key], FRAMEEVENT_MOUSE_LEAVE)
                end


            SkillPanelFrame[player].displayed_skill_button = {}

            local last_frame
            for i = 1, 4 do
                new_Frame = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
                    if i == 1 then
                        BlzFrameSetPoint(new_Frame, FRAMEPOINT_TOPLEFT, category_border_panel, FRAMEPOINT_TOPRIGHT, -0.006, 0.)
                    else
                        BlzFrameSetPoint(new_Frame, FRAMEPOINT_TOP, last_frame, FRAMEPOINT_BOTTOM, 0., 0.01)
                    end
                BlzFrameSetSize(new_Frame, 0.18, 0.06)

                local new_FrameBackground = BlzCreateFrameByType("BACKDROP", "Skill background", new_Frame, "", 0)
                BlzFrameSetPoint(new_FrameBackground, FRAMEPOINT_BOTTOMLEFT, new_Frame, FRAMEPOINT_BOTTOMLEFT, 0.015, 0.0145)
                BlzFrameSetPoint(new_FrameBackground, FRAMEPOINT_TOPRIGHT, new_Frame, FRAMEPOINT_TOPRIGHT, -0.015, -0.0145)
                BlzFrameSetTexture(new_FrameBackground, "UI\\basic_bar.blp", 0, true)

                SkillPanelFrame[player].displayed_skill_button[i] = NewButton(SKILL_BUTTON, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.03, 0.03, new_Frame, FRAMEPOINT_LEFT, FRAMEPOINT_LEFT, 0.015, 0., new_Frame)
                BlzFrameSetVisible(SkillPanelFrame[player].displayed_skill_button[i], false)
                last_frame = new_Frame
            end


            new_Frame = BlzCreateFrameByType("SLIDER", "ASD", main_frame, "QuestMainListScrollBar", 0)
            BlzFrameClearAllPoints(new_Frame)
            BlzFrameSetMinMaxValue(new_Frame, 1, 1)
            BlzFrameSetValue(new_Frame, 1)
            BlzFrameSetStepSize(new_Frame, 1)
            BlzFrameSetPoint(new_Frame, FRAMEPOINT_RIGHT, main_frame, FRAMEPOINT_RIGHT, -0.015, 0.035)
            BlzFrameSetSize(new_Frame, 0.015, 0.2)

            SkillPanelFrame[player].slider = new_Frame

            SkillPanelFrame[player].slider_trigger = CreateTrigger()
            BlzTriggerRegisterFrameEvent(SkillPanelFrame[player].slider_trigger, SkillPanelFrame[player].slider, FRAMEEVENT_SLIDER_VALUE_CHANGED)
            TriggerAddAction(SkillPanelFrame[player].slider_trigger, function ()
               -- local id = G etPlayerId(GetTriggerPlayer()) + 1
                    --DisableTrigger(GetTriggeringTrigger())

                    --BlzFrameSetValue(SkillPanelFrame[player].slider, SkillPanelFrame[player].slider_value)
                    --print(SkillPanelFrame[player].slider_value)
                    if BlzGetTriggerFrameEvent() == FRAMEEVENT_MOUSE_WHEEL then
                        if BlzGetTriggerFrameValue() > 0 then
                            SkillPanelFrame[player].slider_value = SkillPanelFrame[player].slider_value + 1
                            if SkillPanelFrame[player].slider_value > #SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].skill_list then
                                SkillPanelFrame[player].slider_value = #SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].skill_list
                            end
                            BlzFrameSetValue(SkillPanelFrame[player].slider, SkillPanelFrame[player].slider_value)
                        else
                            SkillPanelFrame[player].slider_value = SkillPanelFrame[player].slider_value - 1
                            if SkillPanelFrame[player].slider_value < 1 then SkillPanelFrame[player].slider_value = 1 end
                            BlzFrameSetValue(SkillPanelFrame[player].slider, SkillPanelFrame[player].slider_value)
                        end
                    else
                        SkillPanelFrame[player].slider_value = BlzGetTriggerFrameValue()
                    end

                    UpdateSkillWindow(player)
                    --EnableTrigger(GetTriggeringTrigger())
                end)

            BlzTriggerRegisterFrameEvent(SkillPanelFrame[player].slider_trigger, SkillPanelFrame[player].slider, FRAMEEVENT_MOUSE_WHEEL)

        local actual_player = Player(player-1)
        SkillPanelFrame[player].key_trigger = CreateTrigger()
        BlzTriggerRegisterPlayerKeyEvent(SkillPanelFrame[player].key_trigger, actual_player, OSKEY_Q, 0, true)
        BlzTriggerRegisterPlayerKeyEvent(SkillPanelFrame[player].key_trigger, actual_player, OSKEY_W, 0, true)
        BlzTriggerRegisterPlayerKeyEvent(SkillPanelFrame[player].key_trigger, actual_player, OSKEY_E, 0, true)
        BlzTriggerRegisterPlayerKeyEvent(SkillPanelFrame[player].key_trigger, actual_player, OSKEY_R, 0, true)
        BlzTriggerRegisterPlayerKeyEvent(SkillPanelFrame[player].key_trigger, actual_player, OSKEY_D, 0, true)
        BlzTriggerRegisterPlayerKeyEvent(SkillPanelFrame[player].key_trigger, actual_player, OSKEY_F, 0, true)

        TriggerAddAction(SkillPanelFrame[player].key_trigger, function()
            local key = BlzGetTriggerPlayerKey()

                SkillPanelKeybindActive[player] = true

                if key == OSKEY_Q then
                    RegisterPlayerSkillHotkey(player, SkillPanelFrame[player].current_button.skill, KEY_Q)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_Q].ability, true, false)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_Q].ability, false, false)
                elseif key == OSKEY_W then
                    RegisterPlayerSkillHotkey(player, SkillPanelFrame[player].current_button.skill, KEY_W)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_W].ability, true, false)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_W].ability, false, false)
                elseif key == OSKEY_E then
                    RegisterPlayerSkillHotkey(player, SkillPanelFrame[player].current_button.skill, KEY_E)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_E].ability, true, false)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_E].ability, false, false)
                elseif key == OSKEY_R then
                    RegisterPlayerSkillHotkey(player, SkillPanelFrame[player].current_button.skill, KEY_R)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_R].ability, true, false)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_R].ability, false, false)
                elseif key == OSKEY_D then
                    RegisterPlayerSkillHotkey(player, SkillPanelFrame[player].current_button.skill, KEY_D)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_D].ability, true, false)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_D].ability, false, false)
                elseif key == OSKEY_F then
                    RegisterPlayerSkillHotkey(player, SkillPanelFrame[player].current_button.skill, KEY_F)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_F].ability, true, false)
                    BlzUnitDisableAbility(PlayerHero[player], KEYBIND_LIST[KEY_F].ability, false, false)
                end

                SkillPanelKeybindActive[player] = false
                DestroyContextMenu(player)

        end)


        SkillPanelFrame[player].tooltip = NewTooltip(SkillPanelFrame[player].slider, "MyTextTemplateMedium")

        SkillPanelFrame[player].main_frame = main_frame
        SkillPanelFrame[player].state = false
        BlzFrameSetVisible(SkillPanelFrame[player].main_frame, false)
        --SkillPanelFrame[player].default_category = CLASS_SKILL_CATEGORY[unit_data.unit_class][1]
    end

    function SetSkillPanelState(player, state)

         if GetUnitState(PlayerHero[player], UNIT_STATE_LIFE) < 0.045 and state then
            FrameState[player][SKILL_PANEL] = false
            return false
        end


        BlzFrameSetVisible(SkillPanelFrame[player].main_frame, state)
        if GetLocalPlayer() ~= Player(player-1) then
            BlzFrameSetVisible(SkillPanelFrame[player].main_frame, false)
        end
        --BlzFrameSetVisible(SkillPanelFrame[player].main_frame, state)
        SkillPanelFrame[player].state = state

        if state then

            if SkillPanelTutorialData[player] then
                SkillPanelTutorialData[player] = nil
                if GetLocalPlayer() == Player(player-1) then
                    BlzFrameSetVisible(PlayerUI.arrow, false)
                    BlzFrameSetVisible(PlayerUI.arrow_ability_text, false)
                end
            end

            UpdateSkillList(player)
        else
            for i = 1, 6 do EnableTrigger(KEYBIND_LIST[i].trigger) end
            DisableTrigger(SkillPanelFrame[player].key_trigger)
            DestroyContextMenu(player)
            RemoveTooltip(player)
        end

        return state
    end

    
    function SkillPanelInit()

        SkillPanelFrame = {}
        BackupButtonData = {}
        SkillPanelTutorialData = {}

        ClickTrigger = CreateTrigger()
        EnterTrigger = CreateTrigger()
        LeaveTrigger = CreateTrigger()


        ProjectionKeyButtonTrigger = CreateTrigger()
        PlayerProjection = {}
        local players_projections_timer = {}

        for i = 1, 6 do
            players_projections_timer[i] = CreateTimer()
        end

        last_EnteredFrame = {}
        last_EnteredFrameTimer = {}

        SkillPanelKeybindActive = {}
        for i = 1, 6 do
            last_EnteredFrameTimer[i] = CreateTimer()
            SkillPanelKeybindActive[i] = false
        end


        TriggerAddAction(LeaveTrigger, function()
            --local player = GetPlayerId(GetTriggerPlayer())+1

                --RemoveTooltip(player)

                --TimerStart(players_projections_timer[player], 4., false, function()
                    --if PlayerProjection[player] then
                      --  DestroyVisual(PlayerProjection[player])
                      --  PlayerProjection[player] = nil
                   -- end
              --  end)

        end)

        TriggerAddAction(EnterTrigger, function()
            local button_data = GetButtonData(BlzGetTriggerFrame())
            local player = GetPlayerId(GetTriggerPlayer()) + 1

            TimerStart(last_EnteredFrameTimer[player], GLOBAL_TOOLTIP_FADE_TIME, false, function()
                RemoveTooltip(player)

                TimerStart(players_projections_timer[player], 4., false, function()
                    if PlayerProjection[player] then
                        DestroyVisual(PlayerProjection[player])
                        PlayerProjection[player] = nil
                    end
                end)
                last_EnteredFrame[player] = nil
                --print("remove timed")
            end)

            if last_EnteredFrame[player] == BlzGetTriggerFrame() then
                --print("same frame")
                return
            else
                RemoveTooltip(player)

                TimerStart(players_projections_timer[player], 4., false, function()
                    if PlayerProjection[player] then
                        DestroyVisual(PlayerProjection[player])
                        PlayerProjection[player] = nil
                    end
                end)
                --print("remove")
            end

        last_EnteredFrame[player] = BlzGetTriggerFrame()

                if button_data.skill ~= nil then
                    ShowSkillTooltip(button_data.skill, SkillPanelFrame[player].tooltip, button_data, player)
                    local skill = button_data.skill

                        if skill.projection then

                            if PlayerProjection[player] then
                                DestroyVisual(PlayerProjection[player])
                                PlayerProjection[player] = nil
                            end

                            TimerStart(players_projections_timer[player], 0., false, nil)
                            local level = UnitGetAbilityLevel(PlayerHero[player], skill.Id)

                                if skill.projection.type == PROJECTION_TYPE_ARROW then
                                    local missile = GetMissileData(skill.level[level].missile or skill.projection.missile) or nil
                                    local distance = 0.
                                    local radius = 0.

                                    if missile then
                                        distance = missile.max_distance
                                        radius = missile.radius
                                    else
                                        distance = skill.projection.max_distance
                                        radius = skill.projection.radius
                                    end

                                        PlayerProjection[player] = CreateStraightVisual(distance, PlayerHero[player], radius, GetUnitFacing(PlayerHero[player]))
                                elseif skill.projection.type == PROJECTION_TYPE_ARC then
                                    local effect = GetEffectData(skill.level[level].effect or skill.projection.effect)
                                    local angle_window
                                    local range

                                        if effect then
                                            angle_window = effect.level[level].angle_window
                                            range = effect.level[level].area_of_effect
                                        else
                                            angle_window = skill.projection.angle_window
                                            range = skill.projection.area_of_effect
                                        end

                                    if skill.projection.angle_window_delta then
                                        angle_window = angle_window + (math.floor((skill.projection.angle_window_delta / (skill.projection.angle_window_delta_level or 1)) + 0.5) * level)
                                    end

                                    PlayerProjection[player] = CreateArcAreaVisual(range, PlayerHero[player], angle_window)
                                elseif skill.projection.type == PROJECTION_TYPE_AREA then
                                    local effect = GetEffectData(skill.level[level].effect or skill.projection.effect)

                                        if effect then
                                            PlayerProjection[player] = CreateRadiusVisual(effect.level[level].area_of_effect, PlayerHero[player])
                                        else

                                            if skill.projection.area_of_effect then
                                                local range = skill.projection.area_of_effect

                                                    if skill.projection.area_of_effect_delta then
                                                        range = range + (math.floor((skill.projection.area_of_effect_delta / (skill.projection.area_of_effect_delta_level or 1)) + 0.5) * level)
                                                    end

                                                PlayerProjection[player] = CreateRadiusVisual(range, PlayerHero[player])
                                            elseif skill.level[level].range then
                                                PlayerProjection[player] = CreateRadiusVisual(skill.level[level].range or skill.projection.area_of_effect, PlayerHero[player])
                                            end


                                        end

                                end

                        end
                end

        end)


        TriggerAddAction(ClickTrigger, function ()
            local button_data = GetButtonData(BlzGetTriggerFrame())
            local player = GetPlayerId(GetTriggerPlayer()) + 1


                if button_data.button_type < 0 then
                    local last_category_button = GetButtonData(SkillPanelFrame[player].category[SkillPanelFrame[player].current_category].button)
                    BlzFrameSetVisible(last_category_button.sprite, false)
                    --BlzDestroyFrame(last_category_button.sprite)
                    if GetLocalPlayer() == Player(player-1) then BlzFrameSetVisible(button_data.sprite, true) end
                    --button_data.sprite = CreateSprite("selecter2.mdx", 0.9, SkillPanelFrame[player].category[button_data.button_type * -1].button, FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02, button_data.image)
                    SkillPanelFrame[player].current_category = button_data.button_type * -1
                    UpdateSkillList(player)
                    DestroyContextMenu(player)
                    DisableTrigger(SkillPanelFrame[player].key_trigger)
                elseif button_data.button_type == SKILL_BUTTON then
                    CreatePlayerContextMenu(player, button_data.button, FRAMEPOINT_RIGHT, SkillPanelFrame[player].slider)
                    CreateBindContext(player, button_data, 0)
                    SkillPanelFrame[player].current_button = button_data
                    EnableTrigger(SkillPanelFrame[player].key_trigger)
                    for i = 1, 6 do DisableTrigger(KEYBIND_LIST[i].trigger) end
                elseif button_data.button_type > 0 then
                    if button_data.skill ~= nil then
                        CreatePlayerContextMenu(player, button_data.button, FRAMEPOINT_RIGHT, SkillPanelFrame[player].slider)
                        CreateBindContext(player, button_data, button_data.button_type)
                        AddContextOption(player, LOCALE_LIST[my_locale].SKILL_PANEL_UNBIND, function()
                            --print(button_data.skill.name)
                            UnregisterPlayerSkillHotkey(player, button_data.skill)
                        end)
                        SkillPanelFrame[player].current_button = button_data
                        EnableTrigger(SkillPanelFrame[player].key_trigger)
                        for i = 1, 6 do DisableTrigger(KEYBIND_LIST[i].trigger) end
                    end
                end

        end)

    end

end