---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MSI.
--- DateTime: 25.03.2022 2:53
---
do

    JournalFrame = nil
    local ClickTrigger
    local EnterTrigger
    local LeaveTrigger


    TASK_DONE_STRING = ""
    JOURNAL_OBJECTIVE_STATE_DONE = 1
    JOURNAL_OBJECTIVE_STATE_AQUIRED = 2
    JOURNAL_OBJECTIVE_STATE_FAILED = 3


    local function GetEntry(player, id)
        for i = 1, #JournalFrame[player].entries_list do
            if JournalFrame[player].entries_list[i].id == id then
                return JournalFrame[player].entries_list[i]
            end
        end
        return nil
    end


    function TaskCompletedMessage(id, player)
        local entry = GetEntry(player, id)

            if entry then
                if GetLocalPlayer() == Player(player-1) then StartSound(bj_questCompletedSound) end
                DisplayTimedTextToPlayer(Player(player-1), 0, 0, bj_TEXT_DELAY_QUESTDONE, " ")
                DisplayTimedTextToPlayer(Player(player-1), 0, 0, bj_TEXT_DELAY_QUESTDONE, TASK_DONE_STRING .. entry.header)
            end

    end


    ---@param button_type number
    ---@param texture string
    ---@param size_x real
    ---@param size_y real
    ---@param relative_frame framehandle
    ---@param frame_point_from framepointtype
    ---@param frame_point_to framepointtype
    ---@param offset_x real
    ---@param offset_y real
    ---@param parent_frame framehandle
    local function NewButton(texture, size_x, size_y, relative_frame, frame_point_from, frame_point_to, offset_x, offset_y, parent_frame)
        local new_Frame = BlzCreateFrame('ScriptDialogButton', parent_frame, 0, 0)
        local new_FrameImage = BlzCreateFrameByType("BACKDROP", "ButtonIcon", new_Frame, "", 0)
        local new_FrameBorder = BlzCreateFrameByType("BACKDROP", "ButtonBorder", new_Frame, "", 0)

        ButtonList[new_Frame] = {
            entry = nil,
            button = new_Frame,
            image = new_FrameImage,
            border = new_FrameBorder
        }

        FrameRegisterNoFocus(new_Frame)
        FrameRegisterClick(new_Frame, texture)

        BlzTriggerRegisterFrameEvent(ClickTrigger, new_Frame, FRAMEEVENT_CONTROL_CLICK)
        BlzTriggerRegisterFrameEvent(EnterTrigger, new_Frame, FRAMEEVENT_MOUSE_ENTER)
        BlzTriggerRegisterFrameEvent(LeaveTrigger, new_Frame, FRAMEEVENT_MOUSE_LEAVE)

        BlzFrameSetPoint(new_Frame, frame_point_from, relative_frame, frame_point_to, offset_x, offset_y)
        BlzFrameSetSize(new_Frame, size_x, size_y)
        BlzFrameSetTexture(new_FrameImage, texture, 0, true)
        BlzFrameSetAllPoints(new_FrameImage, new_Frame)
        BlzFrameSetTexture(new_FrameBorder, "DiabolicUI_Button_50x50_BorderHighlight.tga", 0, true)
        BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_TOPRIGHT, new_Frame, FRAMEPOINT_TOPRIGHT, 0.008, 0.008)
        BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_BOTTOMLEFT, new_Frame, FRAMEPOINT_BOTTOMLEFT, -0.008, -0.008)

        return new_Frame
    end



    ---@param player integer
    function UpdateJournalWindow(player)

        if JournalFrame[player].state then
            local in_focus = false

                for i = 1, 6 do
                    local button_data = GetButtonData(JournalFrame[player].entries_buttons[i])

                        if JournalFrame[player].entries_list[i + (JournalFrame[player].slider_value-1)] then
                            local entry = JournalFrame[player].entries_list[i + JournalFrame[player].slider_value-1]
                            BlzFrameSetTexture(button_data.image, entry.icon, 0, true)
                            FrameChangeTexture(button_data.button, entry.icon)
                            button_data.entry = entry
                        else
                            button_data.entry = nil
                            BlzFrameSetTexture(button_data.image, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0, true)
                            FrameChangeTexture(button_data.button, "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp")
                        end

                    if button_data.entry and JournalFrame[player].entry_in_focus == button_data.entry then
                        BlzFrameSetVisible(JournalFrame[player].sprite, true)
                        BlzFrameClearAllPoints(JournalFrame[player].sprite)
                        BlzFrameSetPoint(JournalFrame[player].sprite, FRAMEPOINT_BOTTOMLEFT, button_data.border, FRAMEPOINT_BOTTOMLEFT, 0.028, 0.028)
                        BlzFrameSetText(JournalFrame[player].entry_text_frame, "")

                        if button_data.entry.objectives then
                            --local objectives_text = ""

                            for i = 1, #button_data.entry.objectives do
                                if button_data.entry.objectives[i].state == JOURNAL_OBJECTIVE_STATE_DONE then
                                    BlzFrameAddText(JournalFrame[player].entry_text_frame, "- " .. "|c0000FF00" .. button_data.entry.objectives[i].text .. "|r")
                                elseif button_data.entry.objectives[i].state == JOURNAL_OBJECTIVE_STATE_FAILED then
                                    BlzFrameAddText(JournalFrame[player].entry_text_frame, "- " .. "|c00FF0000" .. button_data.entry.objectives[i].text .. "|r")
                                else
                                    BlzFrameAddText(JournalFrame[player].entry_text_frame, "- " .. button_data.entry.objectives[i].text)
                                end
                            end

                            BlzFrameAddText(JournalFrame[player].entry_text_frame, "=========================")
                        end

                        for i = 1, #button_data.entry.text do BlzFrameAddText(JournalFrame[player].entry_text_frame, button_data.entry.text[i]) end
                        BlzFrameSetText(JournalFrame[player].header, button_data.entry.header)
                        in_focus = true
                    end

                end

            if not in_focus then
                BlzFrameSetVisible(JournalFrame[player].sprite, false)
            end

        end

    end


    local function ClickActions()
        local player = GetPlayerId(GetTriggerPlayer()) + 1
        local button_data = GetButtonData(BlzGetTriggerFrame())

            BlzFrameSetVisible(JournalFrame[player].sprite, true)
            BlzFrameClearAllPoints(JournalFrame[player].sprite)
            BlzFrameSetPoint(JournalFrame[player].sprite, FRAMEPOINT_BOTTOMLEFT,button_data.border, FRAMEPOINT_BOTTOMLEFT, 0.028, 0.028)
            JournalFrame[player].entry_in_focus = button_data.entry

        if button_data.entry then
            BlzFrameSetText(JournalFrame[player].entry_text_frame, "")

            if button_data.entry.objectives then
                local objectives_text = ""

                for i = 1, #button_data.entry.objectives do
                    if button_data.entry.objectives[i].state == JOURNAL_OBJECTIVE_STATE_DONE then
                        BlzFrameAddText(JournalFrame[player].entry_text_frame, "- " .. "|c0000FF00" .. button_data.entry.objectives[i].text .. "|r")
                    elseif button_data.entry.objectives[i].state == JOURNAL_OBJECTIVE_STATE_FAILED then
                        BlzFrameAddText(JournalFrame[player].entry_text_frame, "- " .. "|c00FF0000" .. button_data.entry.objectives[i].text .. "|r")
                    else
                        BlzFrameAddText(JournalFrame[player].entry_text_frame, "- " .. button_data.entry.objectives[i].text)
                    end
                end

                BlzFrameAddText(JournalFrame[player].entry_text_frame, "=========================")
            end

            for i = 1, #button_data.entry.text do BlzFrameAddText(JournalFrame[player].entry_text_frame, button_data.entry.text[i]) end
            BlzFrameSetText(JournalFrame[player].header, button_data.entry.header)
        else
            BlzFrameSetText(JournalFrame[player].entry_text_frame, "")
            BlzFrameSetText(JournalFrame[player].header, "")
        end

    end


    ---@param player integer
    ---@param id string
    ---@param label string
    function HasJournalEntryLabel(player, id, label)
        for i = 1, #JournalFrame[player].entries_list do
            if JournalFrame[player].entries_list[i].id == id and JournalFrame[player].entries_list[i].labels then
                if JournalFrame[player].entries_list[i].labels[label] then
                    return true
                end
            end
        end
        return false
    end


    ---@param player player
    ---@param id string
    ---@param label string
    function AddJournalEntryLabel(player, id, label)
        for i = 1, #JournalFrame[player].entries_list do
            if JournalFrame[player].entries_list[i].id == id then
                if JournalFrame[player].entries_list[i].labels then
                    JournalFrame[player].entries_list[i].labels[label] = true
                else
                    JournalFrame[player].entries_list[i].labels = { [label] = true }
                end
                break
            end
        end
    end


    ---@param player integer
    ---@param id string
    ---@param obj_id string
    ---@return integer
    function GetJournalEntryObjectiveState(player, id, obj_id)
        local entry = GetEntry(player, id)

            if entry and entry.objectives then
                for i = 1, #entry.objectives do
                    if entry.objectives[i].id == obj_id then
                        return entry.objectives[i].state
                    end
                end
            end

        return JOURNAL_OBJECTIVE_STATE_AQUIRED
    end


    ---@param player integer
    ---@param id string
    ---@param obj_id string
    ---@param state integer
    ---@return boolean
    function IsJournalEntryObjectiveState(player, id, obj_id, state)
        local entry = GetEntry(player, id)

            if entry and entry.objectives then
                for i = 1, #entry.objectives do
                    if entry.objectives[i].id == obj_id then
                        return entry.objectives[i].state == state
                    end
                end
            end

        return false
    end


    ---@param player integer
    ---@param id string
    ---@param obj_id string
    ---@param state integer
    ---@param sound boolean
    function SetJournalEntryObjectiveState(player, id, obj_id, state, sound)
        local entry = GetEntry(player, id)

            if entry and entry.objectives then
                for i = 1, #entry.objectives do
                    if entry.objectives[i].id == obj_id then
                        entry.objectives[i].state = state
                        if sound then PlayLocalSound("Sound\\NewLogEntry.wav", player-1, 120) end
                        UpdateJournalWindow(player)
                        break
                    end
                end
            end
    end


    ---@param player integer
    ---@param id string
    ---@param obj_id string
    ---@param text string
    function AddJournalEntryObjective(player, id, obj_id, text)
        local entry = GetEntry(player, id)

            if entry then
                if not entry.objectives then entry.objectives = {} end
                entry.objectives[#entry.objectives + 1] = { id = obj_id, text = text, state = JOURNAL_OBJECTIVE_STATE_AQUIRED }
                UpdateJournalWindow(player)
            end

    end


    ---@param player integer
    ---@param id string
    ---@return boolean
    function HasJournalEntry(player, id)
        for i = 1, #JournalFrame[player].entries_list do
            if JournalFrame[player].entries_list[i].id == id then
                return true
            end
        end
        return false
    end


    ---@param player integer
    ---@param id string
    ---@param text string
    ---@param sound boolean
    function AddJournalEntryText(player, id, text, sound)
        for i = 1, #JournalFrame[player].entries_list do
            if JournalFrame[player].entries_list[i].id == id then
                JournalFrame[player].entries_list[i].text[#JournalFrame[player].entries_list[i].text+1] = text
                if sound then PlayLocalSound("Sound\\NewLogEntry.wav", player-1, 120) end
                UpdateJournalWindow(player)
                break
            end
        end
    end


    local function SortEntries(player)
        local entry_list = JournalFrame[player].entries_list
        local max = #entry_list

        if max == 1 then
            return
        end

        local continue = true
        while continue do
            continue = false
            for i = 1, max do
                if i < max then
                    if entry_list[i].priority < entry_list[i+1].priority then
                        local current_entry = entry_list[i]
                        entry_list[i] = entry_list[i+1]
                        entry_list[i+1] = current_entry
                        continue = true
                    end
                end
            end

        end

    end

    ---@param player integer
    ---@param id string
    function RemoveJournalEntry(player, id)
        for i = 1, #JournalFrame[player].entries_list do
            if JournalFrame[player].entries_list[i] and JournalFrame[player].entries_list[i].id == id then
                if JournalFrame[player].entry_in_focus == JournalFrame[player].entries_list[i] then JournalFrame[player].entry_in_focus = nil end
                --JournalFrame[player].entries_list[i] = nil
                table.remove(JournalFrame[player].entries_list, i)
                SortEntries(player)
                UpdateJournalWindow(player)
                break
            end
        end
    end


    ---@param player integer
    ---@param id string
    ---@param icon string
    ---@param header string
    ---@param priority integer
    ---@param sound boolean
    function AddJournalEntry(player, id, icon, header, priority, sound)

        for i = 1, #JournalFrame[player].entries_list do
            if JournalFrame[player].entries_list[i].id == id then
                return
            end
        end
        
        JournalFrame[player].entries_list[#JournalFrame[player].entries_list+1] = { id = id, icon = icon, priority = priority, header = header, text = {} }
        BlzFrameSetMinMaxValue(JournalFrame[player].entries_slider, 1, #JournalFrame[player].entries_list)
        SortEntries(player)
        UpdateJournalWindow(player)
        if sound then PlayLocalSound("Sound\\NewLogEntry.wav", player-1, 120) end
        DisplayTimedTextToPlayer(Player(player-1), 0, 0, bj_TEXT_DELAY_ALWAYSHINT, " ")
        DisplayTimedTextToPlayer(Player(player-1), 0, 0, bj_TEXT_DELAY_ALWAYSHINT, GetLocalString("|c009034FFПолучена новая запись в журнале: |r", "|c009034FFNew journal entry aquired: |r") .. header)
    end


    function ReloadJournalFrames()
        for player = 1, 6 do
            if PlayerHero[player] then
                local main_frame = BlzCreateFrame('EscMenuBackdrop', GAME_UI, 0, 0)
                JournalFrame[player].mainframe = main_frame

                BlzFrameSetPoint(main_frame, FRAMEPOINT_TOPLEFT, GAME_UI, FRAMEPOINT_TOPLEFT, 0., -0.05)
                BlzFrameSetSize(main_frame, 0.34, 0.394)

                local new_frame = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPLEFT, main_frame, FRAMEPOINT_TOPLEFT, 0.011, -0.011)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPRIGHT, main_frame, FRAMEPOINT_TOPRIGHT, -0.011, -0.011)
                BlzFrameSetSize(new_frame, 0.04, 0.068)

                local topborder = new_frame


                local new_FrameImage = BlzCreateFrameByType("BACKDROP", "ButtonIcon", new_frame, "", 0)
                local new_FrameBorder = BlzCreateFrameByType("BACKDROP", "ButtonBorder", new_frame, "", 0)

                BlzFrameSetTexture(new_FrameImage, "UI\\BTNScribeScroll.blp", 0, true)
                BlzFrameSetPoint(new_FrameImage, FRAMEPOINT_TOPLEFT, topborder, FRAMEPOINT_TOPLEFT, 0.014, -0.014)
                BlzFrameSetSize(new_FrameImage, 0.04, 0.04)

                BlzFrameSetTexture(new_FrameBorder, "DiabolicUI_Button_50x50_BorderHighlight.tga", 0, true)
                BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_TOPRIGHT, new_FrameImage, FRAMEPOINT_TOPRIGHT, 0.008, 0.008)
                BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_BOTTOMLEFT, new_FrameImage, FRAMEPOINT_BOTTOMLEFT, -0.008, -0.008)


                new_frame = BlzCreateFrameByType("TEXT", "header", topborder, "", 0)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_CENTER, topborder, FRAMEPOINT_CENTER, 0., 0.)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_RIGHT, topborder, FRAMEPOINT_RIGHT, -0.003, 0.)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_LEFT, new_FrameBorder, FRAMEPOINT_LEFT, 0.003, 0.)
                BlzFrameSetScale(new_frame, 1.4)
                BlzFrameSetTextAlignment(new_frame, TEXT_JUSTIFY_CENTER , TEXT_JUSTIFY_MIDDLE)

                JournalFrame[player].header = new_frame

                new_frame = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPLEFT, topborder, FRAMEPOINT_BOTTOMLEFT, 0., 0.004)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_BOTTOMLEFT, main_frame, FRAMEPOINT_BOTTOMLEFT, 0.011, 0.011)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPRIGHT, topborder, FRAMEPOINT_TOP, -0.084, 0.)

                local border = new_frame


                new_frame = BlzCreateFrame('BattleNetTextAreaTemplate', main_frame, 0, 0)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPLEFT, border, FRAMEPOINT_TOPRIGHT, -0.007, 0.)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_BOTTOMRIGHT, main_frame, FRAMEPOINT_BOTTOMRIGHT, -0.014, 0.014)

                JournalFrame[player].entry_text_frame = new_frame

                new_frame = BlzCreateFrameByType("SLIDER", "ASD", border, "QuestMainListScrollBar", 0)
                BlzFrameClearAllPoints(new_frame)
                BlzFrameSetMinMaxValue(new_frame, 1, 1)
                BlzFrameSetValue(new_frame, 1)
                BlzFrameSetStepSize(new_frame, 1)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPRIGHT, border, FRAMEPOINT_TOPLEFT, 0.017, -0.018)
                BlzFrameSetPoint(new_frame, FRAMEPOINT_BOTTOMRIGHT, border, FRAMEPOINT_BOTTOMLEFT, 0.017, 0.018)


                JournalFrame[player].entries_slider = new_frame
                JournalFrame[player].slider_value = 1

                JournalFrame[player].slider_trigger = CreateTrigger()
                BlzTriggerRegisterFrameEvent(JournalFrame[player].slider_trigger, JournalFrame[player].entries_slider, FRAMEEVENT_SLIDER_VALUE_CHANGED)
                    TriggerAddAction(JournalFrame[player].slider_trigger, function ()

                            if BlzGetTriggerFrameEvent() == FRAMEEVENT_MOUSE_WHEEL then
                                if BlzGetTriggerFrameValue() > 0 then
                                    JournalFrame[player].slider_value = JournalFrame[player].slider_value + 1
                                    if JournalFrame[player].slider_value > #JournalFrame[player].entries_list then JournalFrame[player].slider_value = #JournalFrame[player].entries_list end
                                    BlzFrameSetValue(JournalFrame[player].entries_slider, JournalFrame[player].slider_value)
                                else
                                    JournalFrame[player].slider_value = JournalFrame[player].slider_value - 1
                                    if JournalFrame[player].slider_value < 1 then JournalFrame[player].slider_value = 1 end
                                    BlzFrameSetValue(JournalFrame[player].entries_slider, JournalFrame[player].slider_value)
                                end
                            else
                                JournalFrame[player].slider_value = BlzGetTriggerFrameValue()
                            end

                            UpdateJournalWindow(player)
                        end)

                    BlzTriggerRegisterFrameEvent(JournalFrame[player].slider_trigger, JournalFrame[player].entries_slider, FRAMEEVENT_MOUSE_WHEEL)


                JournalFrame[player].entries_buttons = {
                    [1] = NewButton("ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.04, 0.04, border, FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT, 0.018, -0.019, main_frame),
                }


                for i = 2, 6 do
                    JournalFrame[player].entries_buttons[i] = NewButton("ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.04, 0.04, JournalFrame[player].entries_buttons[i-1], FRAMEPOINT_TOP, FRAMEPOINT_BOTTOM, 0., -0.006, main_frame)
                end

                local button_data = GetButtonData(JournalFrame[player].entries_buttons[6])
                JournalFrame[player].sprite = CreateSprite("selecter2.mdx", 1., JournalFrame[player].entries_buttons[6], FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02, button_data.border)
                BlzFrameSetVisible(JournalFrame[player].sprite, false)
                BlzFrameSetVisible(JournalFrame[player].mainframe, false)
                JournalFrame[player].state = false
            end
        end
    end


    function CreateJournal(player)
        local main_frame = BlzCreateFrame('EscMenuBackdrop', GAME_UI, 0, 0)
        JournalFrame[player] = { mainframe = main_frame }

        BlzFrameSetPoint(main_frame, FRAMEPOINT_TOPLEFT, GAME_UI, FRAMEPOINT_TOPLEFT, 0., -0.05)
        BlzFrameSetSize(main_frame, 0.34, 0.394)

        local new_frame = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPLEFT, main_frame, FRAMEPOINT_TOPLEFT, 0.011, -0.011)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPRIGHT, main_frame, FRAMEPOINT_TOPRIGHT, -0.011, -0.011)
        BlzFrameSetSize(new_frame, 0.04, 0.068)

        local topborder = new_frame


        local new_FrameImage = BlzCreateFrameByType("BACKDROP", "ButtonIcon", new_frame, "", 0)
        local new_FrameBorder = BlzCreateFrameByType("BACKDROP", "ButtonBorder", new_frame, "", 0)

        BlzFrameSetTexture(new_FrameImage, "UI\\BTNScribeScroll.blp", 0, true)
        BlzFrameSetPoint(new_FrameImage, FRAMEPOINT_TOPLEFT, topborder, FRAMEPOINT_TOPLEFT, 0.014, -0.014)
        BlzFrameSetSize(new_FrameImage, 0.04, 0.04)

        BlzFrameSetTexture(new_FrameBorder, "DiabolicUI_Button_50x50_BorderHighlight.tga", 0, true)
        BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_TOPRIGHT, new_FrameImage, FRAMEPOINT_TOPRIGHT, 0.008, 0.008)
        BlzFrameSetPoint(new_FrameBorder, FRAMEPOINT_BOTTOMLEFT, new_FrameImage, FRAMEPOINT_BOTTOMLEFT, -0.008, -0.008)


        new_frame = BlzCreateFrameByType("TEXT", "header", topborder, "", 0)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_CENTER, topborder, FRAMEPOINT_CENTER, 0., 0.)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_RIGHT, topborder, FRAMEPOINT_RIGHT, -0.003, 0.)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_LEFT, new_FrameBorder, FRAMEPOINT_LEFT, 0.003, 0.)
        BlzFrameSetScale(new_frame, 1.4)
        BlzFrameSetTextAlignment(new_frame, TEXT_JUSTIFY_CENTER , TEXT_JUSTIFY_MIDDLE)

        JournalFrame[player].header = new_frame

        new_frame = BlzCreateFrame('EscMenuBackdrop', main_frame, 0, 0)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPLEFT, topborder, FRAMEPOINT_BOTTOMLEFT, 0., 0.004)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_BOTTOMLEFT, main_frame, FRAMEPOINT_BOTTOMLEFT, 0.011, 0.011)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPRIGHT, topborder, FRAMEPOINT_TOP, -0.084, 0.)

        local border = new_frame


        new_frame = BlzCreateFrame('BattleNetTextAreaTemplate', main_frame, 0, 0)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPLEFT, border, FRAMEPOINT_TOPRIGHT, -0.007, 0.)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_BOTTOMRIGHT, main_frame, FRAMEPOINT_BOTTOMRIGHT, -0.014, 0.014)

        JournalFrame[player].entry_text_frame = new_frame

        new_frame = BlzCreateFrameByType("SLIDER", "ASD", border, "QuestMainListScrollBar", 0)
        BlzFrameClearAllPoints(new_frame)
        BlzFrameSetMinMaxValue(new_frame, 1, 1)
        BlzFrameSetValue(new_frame, 1)
        BlzFrameSetStepSize(new_frame, 1)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_TOPRIGHT, border, FRAMEPOINT_TOPLEFT, 0.017, -0.018)
        BlzFrameSetPoint(new_frame, FRAMEPOINT_BOTTOMRIGHT, border, FRAMEPOINT_BOTTOMLEFT, 0.017, 0.018)


        JournalFrame[player].entries_slider = new_frame
        JournalFrame[player].slider_value = 1

        JournalFrame[player].slider_trigger = CreateTrigger()
        BlzTriggerRegisterFrameEvent(JournalFrame[player].slider_trigger, JournalFrame[player].entries_slider, FRAMEEVENT_SLIDER_VALUE_CHANGED)
            TriggerAddAction(JournalFrame[player].slider_trigger, function ()

                    if BlzGetTriggerFrameEvent() == FRAMEEVENT_MOUSE_WHEEL then
                        if BlzGetTriggerFrameValue() > 0 then
                            JournalFrame[player].slider_value = JournalFrame[player].slider_value + 1
                            if JournalFrame[player].slider_value > #JournalFrame[player].entries_list then JournalFrame[player].slider_value = #JournalFrame[player].entries_list end
                            BlzFrameSetValue(JournalFrame[player].entries_slider, JournalFrame[player].slider_value)
                        else
                            JournalFrame[player].slider_value = JournalFrame[player].slider_value - 1
                            if JournalFrame[player].slider_value < 1 then JournalFrame[player].slider_value = 1 end
                            BlzFrameSetValue(JournalFrame[player].entries_slider, JournalFrame[player].slider_value)
                        end
                    else
                        JournalFrame[player].slider_value = BlzGetTriggerFrameValue()
                    end

                    UpdateJournalWindow(player)
                end)

            BlzTriggerRegisterFrameEvent(JournalFrame[player].slider_trigger, JournalFrame[player].entries_slider, FRAMEEVENT_MOUSE_WHEEL)

        JournalFrame[player].entries_list = {  }


        JournalFrame[player].entries_buttons = {
            [1] = NewButton("ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.04, 0.04, border, FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT, 0.018, -0.019, main_frame),
        }


        for i = 2, 6 do
            JournalFrame[player].entries_buttons[i] = NewButton("ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp", 0.04, 0.04, JournalFrame[player].entries_buttons[i-1], FRAMEPOINT_TOP, FRAMEPOINT_BOTTOM, 0., -0.006, main_frame)
        end

        local button_data = GetButtonData(JournalFrame[player].entries_buttons[6])
        JournalFrame[player].sprite = CreateSprite("selecter2.mdx", 1., JournalFrame[player].entries_buttons[6], FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT, 0.02, 0.02, button_data.border)
        BlzFrameSetVisible(JournalFrame[player].sprite, false)
        BlzFrameSetVisible(JournalFrame[player].mainframe, false)
        JournalFrame[player].state = false
    end



    function SetJournalPanelState(player, state)


        if GetLocalPlayer() == Player(player - 1) then
            BlzFrameSetVisible(JournalFrame[player].mainframe, state)
        end

        if GetLocalPlayer() ~= Player(player-1) then BlzFrameSetVisible(JournalFrame[player].mainframe, false) end

        JournalFrame[player].state = state

        if state then
            BlzFrameSetValue(JournalFrame[player].entries_slider, 1)
            JournalFrame[player].slider_value = 1
            UpdateJournalWindow(player)
        end

        return state
    end


    function InitJournal()
        JournalFrame = {}

        ClickTrigger = CreateTrigger()
        EnterTrigger = CreateTrigger()
        LeaveTrigger = CreateTrigger()

        TASK_DONE_STRING = "|c000080FF" .. GetLocalString("Поручение выполнено", "Task completed") ..": |r"

        TriggerAddAction(ClickTrigger, ClickActions)

    end

end